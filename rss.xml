<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>The Life Monadic</title>
        <link>http://duplode.github.io</link>
        <description><![CDATA[Haskell amusements]]></description>
        <atom:link href="http://duplode.github.io/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 19 May 2017 07:30:00 UT</lastBuildDate>
        <item>
    <title>Traversable: A Remix</title>
    <link>http://duplode.github.io/posts/traversable-a-remix.html</link>
    <description><![CDATA[<p><code>Traversable</code> is a fun type class. It lies at a crossroad, where many basic Haskell concepts meet, and it can be presented in multiple ways that provide complementary intuitions. In this post, <code>Traversable</code> will be described from a slightly unusual point of view, or at least one that is not put into foreground all that often. We will suspend for a moment the picture of walking across a container while using an effectful function, and instead start by considering what can be done with effectful functions.</p>
<div>

</div>
<!--more-->
<h2 id="weird-fishes">Weird fishes</h2>
<p>Let’s begin with a familiar sight:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">a <span class="ot">-&gt;</span> <span class="dt">F</span> b</code></pre></div>
<p>There are quite a few overlapping ways of talking about functions with such a type. If <code>F</code> is a <code>Functor</code>, we can say the function produces a functorial context; if it is an <code>Applicative</code>, we (also) say it produces an effect; and if it is a <code>Monad</code> we (also) call it a Kleisli arrow. Kleisli arrows are the functions we use with <code>(&gt;&gt;=)</code>. Kleisli arrows for a specific <code>Monad</code> form a category, with <code>return</code> as identity and the fish operator, <code>(&lt;=&lt;)</code>, as composition. If we pick <code>join</code> as the fundamental <code>Monad</code> operation, <code>(&lt;=&lt;)</code> can be defined in terms of it as:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(&lt;=&lt;) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> (b <span class="ot">-&gt;</span> m c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m c)
g <span class="fu">&lt;=&lt;</span> f <span class="fu">=</span> join <span class="fu">.</span> fmap g <span class="fu">.</span> f</code></pre></div>
<p>The category laws, then, become an alternative presentation of the monad laws:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">return <span class="fu">&lt;=&lt;</span> f <span class="fu">=</span> f
f <span class="fu">&lt;=&lt;</span> return <span class="fu">=</span> f
(h <span class="fu">&lt;=&lt;</span> g) <span class="fu">&lt;=&lt;</span> f <span class="fu">=</span> h <span class="fu">&lt;=&lt;</span> (g <span class="fu">&lt;=&lt;</span> f)</code></pre></div>
<p>All of that is very well-known. Something less often noted, though, is that there is an interesting category for <code>a -&gt; F b</code> functions even if <code>F</code> is not a <code>Monad</code>. Getting to it is amusingly easy: we just have to take the Kleisli category operators and erase the monad-specific parts from their definitions. In the case of <code>(&lt;=&lt;)</code>, that means removing the <code>join</code> (and, for type bookkeeping purposes, slipping in a <a href="http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Compose.html"><code>Compose</code></a> in its place):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(&lt;%&lt;) ::</span> (<span class="dt">Functor</span> f, <span class="dt">Functor</span> g) <span class="ot">=&gt;</span>
    (b <span class="ot">-&gt;</span> g c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Compose</span> f g c)
g <span class="fu">&lt;%&lt;</span> f <span class="fu">=</span> <span class="dt">Compose</span> <span class="fu">.</span> fmap g <span class="fu">.</span> f</code></pre></div>
<p>While <code>(&lt;=&lt;)</code> creates two monadic layers and merges them, <code>(&lt;%&lt;)</code> creates two functorial layers and leaves both in place. Note that doing away with <code>join</code> means the <code>Functor</code>s introduced by the functions being composed can differ, and so the category we are setting up has <em>all</em> functions that fit <code>Functor f =&gt; a -&gt; f b</code> as arrows. That is unlike what we have with <code>(&lt;=&lt;)</code> and the corresponding Kleisli categories, which only concern a single specific monad.</p>
<p>As for <code>return</code>, not relying on <code>Monad</code> means we need a different identity. Given the freedom to pick any <code>Functor</code> mentioned just above, it makes perfect sense to replace bringing a value into a <code>Monad</code> in a boring way by bringing a value into the boring <code>Functor</code> <em>par excellence</em>, <a href="http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Identity.html"><code>Identity</code></a>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Identity</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> <span class="dt">Identity</span> a</code></pre></div>
<p>With <code>(&lt;%&lt;)</code> as composition and <code>Identity</code> as identity, we can state the following category laws:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Identity</span> <span class="fu">&lt;%&lt;</span> f <span class="fu">~</span> f
f <span class="fu">&lt;%&lt;</span> <span class="dt">Identity</span> <span class="fu">~</span> f
(h <span class="fu">&lt;%&lt;</span> g) <span class="fu">&lt;%&lt;</span> f <span class="fu">~</span> h <span class="fu">&lt;%&lt;</span> (g <span class="fu">&lt;%&lt;</span> f)</code></pre></div>
<p>Why didn’t I write them as equalities? Once the definition of <code>(&lt;%&lt;)</code> is substituted, it becomes clear that they do not hold literally as equalities: the left hand sides of the identity laws will have a stray <code>Identity</code>, and the uses of <code>Compose</code> on either side of the associativity law will be associated differently. Since <code>Identity</code> and <code>Compose</code> are essentially bookkeeping boilerplate, however, it would be entirely reasonable to ignore such differences. If we do that, it becomes clear that the laws do hold. All in all, we have a category, even though we can’t go all the way and shape it into a <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Category.html"><code>Category</code></a> instance, not only due to the trivialities we chose to overlook, but also because of how each <code>a -&gt; F b</code> function introduces a functorial layer <code>F</code> in a way that is not reflected in the target object <code>b</code>.</p>
<p>The first thing to do once after figuring out we have a category in our hands is looking for functors involving it.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> One of the simplest paths towards one is considering a way to, given some <code>Functor</code> <code>T</code>, change the source and target objects in an <code>a -&gt; F b</code> function to <code>T a</code> and <code>T b</code> (that is precisely what <code>fmap</code> does with regular functions). This would give an endofunctor, whose arrow mapping would have a signature shaped like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(a <span class="ot">-&gt;</span> <span class="dt">F</span> b) <span class="ot">-&gt;</span> <span class="dt">T</span> a <span class="ot">-&gt;</span> <span class="dt">F</span> (<span class="dt">T</span> b)</code></pre></div>
<p>This signature shape, however, <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Traversable.html">should ring a bell</a>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> (<span class="dt">Functor</span> t, <span class="dt">Foldable</span> t) <span class="ot">=&gt;</span> <span class="dt">Traversable</span> t <span class="kw">where</span>
<span class="ot">    traverse ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> f (t b)
    <span class="co">-- etc.</span></code></pre></div>
<p>If <code>traverse</code> were the arrow mapping of our endofunctor, the relevant functor laws would be:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">traverse <span class="dt">Identity</span> <span class="fu">=</span> <span class="dt">Identity</span>
traverse (g <span class="fu">&lt;%&lt;</span> f) <span class="fu">=</span> traverse g <span class="fu">&lt;%&lt;</span> traverse f</code></pre></div>
<p>Substituting the definition of <code>(&lt;%&lt;)</code> reveals these are the identity and composition laws of <code>Traversable</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">traverse <span class="dt">Identity</span> <span class="fu">=</span> <span class="dt">Identity</span>
traverse (<span class="dt">Compose</span> <span class="fu">.</span> fmap g <span class="fu">.</span> f) <span class="fu">=</span> <span class="dt">Compose</span> <span class="fu">.</span> fmap (traverse g) <span class="fu">.</span> traverse f</code></pre></div>
<p>There it is: a <code>Traversable</code> instance is an endofunctor for a category made of arbitrary context-producing functions.<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></p>
<p>Is it really, though? You may have noticed I have glossed over something quite glaring: if <code>(&lt;%&lt;)</code> only involved <code>Functor</code> constraints, where does the <code>Applicative</code> in <code>traverse</code> comes from?</p>
<h2 id="arpeggi">Arpeggi</h2>
<p>Let’s pretend we have just invented the <code>Traversable</code> class by building it around the aforementioned endofunctor. At this point, there is no reason for using anything more restrictive than <code>Functor</code> in the signature of its arrow mapping:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Tentative signature:</span>
traverse<span class="ot"> ::</span> (<span class="dt">Functor</span> f, <span class="dt">Traversable</span> t) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> f (t b)</code></pre></div>
<p>The natural thing to do now is trying to write <code>traverse</code> for various choices of <code>t</code>. Let’s try it for one of the simplest <code>Functor</code>s around: the pair functor, <code>(,) e</code> – values with something extra attached:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Traversable</span> ((,) e) <span class="kw">where</span>
    <span class="co">-- traverse :: Functor f =&gt; (a -&gt; f b) -&gt; (e, a) -&gt; f (e, b)</span>
    traverse f (e, x) <span class="fu">=</span> ((,) e) <span class="fu">&lt;$&gt;</span> f x</code></pre></div>
<p>Simple enough: apply the function to the contained value, and then shift the extra stuff into the functorial context with <code>fmap</code>. The resulting <code>traverse</code> follows the functor laws just fine.</p>
<p>If we try to do it for different functors, though, we quickly run into trouble. <code>Maybe</code> looks simple enough…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Traversable</span> <span class="dt">Maybe</span> <span class="kw">where</span>
    <span class="co">-- traverse :: Functor f =&gt; (a -&gt; f b) -&gt; Maybe a -&gt; f (Maybe b)</span>
    traverse f (<span class="dt">Just</span> x) <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">&lt;$&gt;</span> f x
    traverse f <span class="dt">Nothing</span>  <span class="fu">=</span> <span class="co">-- ex nihilo</span></code></pre></div>
<p>… but the <code>Nothing</code> case stumps us: there is no value that can be supplied to <code>f</code>, which means the functorial context would have to be created out of nothing.</p>
<p>For another example, consider what we might do with an homogeneous pair type (or, if you will, a vector of length two):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Duo</span> a <span class="fu">=</span> <span class="dt">Duo</span> a a

<span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Duo</span> <span class="kw">where</span>
    fmap f (<span class="dt">Duo</span> x y) <span class="fu">=</span> <span class="dt">Duo</span> (f x) (f y)

<span class="kw">instance</span> <span class="dt">Traversable</span> <span class="dt">Duo</span> <span class="kw">where</span>
    <span class="co">-- traverse :: Functor f =&gt; (a -&gt; f b) -&gt; Duo a -&gt; f (Duo b)</span>
    traverse f (<span class="dt">Duo</span> x y) <span class="fu">=</span> <span class="co">-- dilemma</span></code></pre></div>
<p>Here, we seemingly have to choose between applying <code>f</code> to <code>x</code> or to <code>y</code>, and then using <code>fmap (\z -&gt; Duo z z)</code> on the result. No matter the choice, though, discarding one of the values means the functor laws will be broken. A lawful implementation would require somehow combining the functorial values <code>f x</code> and <code>f y</code>.</p>
<p>As luck would have it, though, there is a type class which provides ways to both create a functorial context out of nothing and to combine functorial values: <code>Applicative</code>. <code>pure</code> solves the first problem; <code>(&lt;*&gt;)</code>, the second:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Traversable</span> <span class="dt">Maybe</span> <span class="kw">where</span>
    <span class="co">-- traverse :: Applicative f =&gt; (a -&gt; f b) -&gt; Maybe a -&gt; f (Maybe b)</span>
    traverse f (<span class="dt">Just</span> x) <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">&lt;$&gt;</span> f x
    traverse f <span class="dt">Nothing</span>  <span class="fu">=</span> pure <span class="dt">Nothing</span>

<span class="kw">instance</span> <span class="dt">Traversable</span> <span class="dt">Duo</span> <span class="kw">where</span>
    <span class="co">-- traverse :: Applicative f =&gt; (a -&gt; f b) -&gt; Duo a -&gt; f (Duo b)</span>
    traverse f (<span class="dt">Duo</span> x y) <span class="fu">=</span> <span class="dt">Duo</span> <span class="fu">&lt;$&gt;</span> f x <span class="fu">&lt;*&gt;</span> f y</code></pre></div>
<p>Shifting to the terminology of containers for a moment, we can describe the matter by saying the version of <code>traverse</code> with the <code>Functor</code> constraint can only handle containers that hold exactly one value. Once the constraint is strengthened to <code>Applicative</code>, however, we have the means to deal with containers that may hold zero or many values. This is a very general solution: there are instances of <code>Traversable</code> for the <code>Identity</code>, <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Const.html"><code>Const</code></a>, <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Sum.html"><code>Sum</code></a>, and <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Product.html"><code>Product</code></a> functors, which suffice to encode any algebraic data type.<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> That explains why the <code>DeriveTraversable</code> GHC extension exists. (Note, though, that <code>Traversable</code> instances in general aren’t unique.)</p>
<p>It must be noted that our reconstruction does not reflect how <code>Traversable</code> was discovered, as the idea of using it to walk across containers holding an arbitrary number of values was there from the start. That being so, <code>Applicative</code> plays an essential role in the usual presentations of <code>Traversable</code>. To illustrate that, I will now paraphrase Definition 3.3 in Jaskelioff and Rypacek’s <a href="https://arxiv.org/abs/1202.2919"><em>An Investigation of the Laws of Traversals</em></a>. It is formulated not in terms of <code>traverse</code>, but of <code>sequenceA</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">sequenceA<span class="ot"> ::</span> (<span class="dt">Applicative</span> f, <span class="dt">Traversable</span> t) <span class="ot">=&gt;</span> t (f a) <span class="ot">-&gt;</span> f (t a)</code></pre></div>
<p><code>sequenceA</code> is characterised as a natural transformation in the category of applicative functors which “respects the monoidal structure of applicative functor composition”. It is worth it to take a few moments to unpack that:</p>
<ul>
<li><p>The category of applicative functors has what the <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Traversable.html"><code>Data.Traversable</code> documentation</a> calls “applicative transformations” as arrows – functions of general type <code>(Applicative f, Applicative g) =&gt; f a -&gt; g a</code> which preserve <code>pure</code> and <code>(&lt;*&gt;)</code>.</p></li>
<li><p><code>sequenceA</code> is a natural transformation in the aforementioned category of applicative functors. The two functors it maps between amount to the two ways of composing an applicative functor with the relevant traversable functor. The naturality law of <code>Traversable</code>…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- t is an applicative transformation</span>
t <span class="fu">.</span> sequenceA <span class="fu">=</span> sequenceA <span class="fu">.</span> fmap t</code></pre></div></li>
</ul>
<p>… captures that fact (which, thanks to parametricity, is a given in Haskell).</p>
<ul>
<li><p>Applicative functors form a monoid, with <code>Identity</code> as unit and functor composition as multiplication. <code>sequenceA</code> preserves these monoidal operations, and the identity and composition laws of <code>Traversable</code> express that:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">sequenceA <span class="fu">.</span> fmap <span class="dt">Identity</span> <span class="fu">=</span> <span class="dt">Identity</span>
sequenceA <span class="fu">.</span> fmap <span class="dt">Compose</span> <span class="fu">=</span> <span class="dt">Compose</span> <span class="fu">.</span> fmap sequenceA <span class="fu">.</span> sequenceA</code></pre></div></li>
</ul>
<p>All of that seems only accidentally related to what we have done up to this point. However, if <code>sequenceA</code> is taken as the starting point, <code>traverse</code> can be defined in terms of it:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">traverse f <span class="fu">=</span> sequenceA <span class="fu">.</span> fmap f</code></pre></div>
<p>Crucially, the opposite path is also possible. It follows from parametricity<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> that…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">traverse f <span class="fu">=</span> traverse id <span class="fu">.</span> fmap f</code></pre></div>
<p>… which allows us to start from <code>traverse</code>, define…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">sequenceA <span class="fu">=</span> traverse id</code></pre></div>
<p>… and continue as before. At this point, our narrative merges with the traditional account of <code>Traversable</code>.</p>
<h2 id="a-note-about-lenses">A note about lenses</h2>
<p>In the previous section, we saw how using <code>Applicative</code> rather than <code>Functor</code> in the type of <code>traverse</code> made it possible to handle containers which don’t necessarily hold just one value. It is not a coincidence that, in <em>lens</em>, this is precisely the difference between <code>Traversal</code> and <code>Lens</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Traversal</span> s t a b <span class="fu">=</span> forall f<span class="fu">.</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t
<span class="kw">type</span> <span class="dt">Lens</span> s t a b <span class="fu">=</span> forall f<span class="fu">.</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t</code></pre></div>
<p>A <code>Lens</code> targets exactly one value. A <code>Traversal</code> might reach zero, one or many targets, which requires a strengthening of the constraint. Van Laarhoven (i.e. <em>lens</em>-style) <code>Traversal</code>s and <code>Lens</code>es can be seen as a straightforward generalisation of the <code>traverse</code>-as-arrow-mapping view we have been discussing here, in which the, so to say, functoriality of the container isn’t necessarily reflected at type level in a direct way.</p>
<h2 id="a-note-about-profunctors">A note about profunctors</h2>
<p>Early on, we noted that <code>(&lt;%&lt;)</code> gave us a category that cannot be expressed as a Haskell <code>Category</code> because its composition is too quirky. We have a general-purpose class that is often a good fit for things that look like functions, arrows and/or <code>Category</code> instances but don’t compose in conventional ways: <code>Profunctor</code>. And sure enough: <em>profunctors</em> defines a profunctor called <a href="https://hackage.haskell.org/package/profunctors-5.2/docs/Data-Profunctor.html#t:Star"><code>Star</code></a>…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- | Lift a 'Functor' into a 'Profunctor' (forwards).</span>
<span class="kw">newtype</span> <span class="dt">Star</span> f d c <span class="fu">=</span> <span class="dt">Star</span> {<span class="ot"> runStar ::</span> d <span class="ot">-&gt;</span> f c }</code></pre></div>
<p>… which corresponds to the arrows of the category we presented in the first section. It should come as no surprise that <code>Star</code> is an instance of a class called <code>Traversing</code>…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Abridged definition.</span>
<span class="kw">class</span> (<span class="dt">Choice</span> p, <span class="dt">Strong</span> p) <span class="ot">=&gt;</span> <span class="dt">Traversing</span> p <span class="kw">where</span>
<span class="ot">  traverse' ::</span> <span class="dt">Traversable</span> f <span class="ot">=&gt;</span> p a b <span class="ot">-&gt;</span> p (f a) (f b)
<span class="ot">  wander ::</span> (forall f<span class="fu">.</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t) <span class="ot">-&gt;</span> p a b <span class="ot">-&gt;</span> p s t

<span class="kw">instance</span> <span class="dt">Applicative</span> m <span class="ot">=&gt;</span> <span class="dt">Traversing</span> (<span class="dt">Star</span> m) <span class="kw">where</span>
  traverse' (<span class="dt">Star</span> m) <span class="fu">=</span> <span class="dt">Star</span> (traverse m)
  wander f (<span class="dt">Star</span> amb) <span class="fu">=</span> <span class="dt">Star</span> (f amb)</code></pre></div>
<p>… which is a profunctor-oriented generalisation of <code>Traversable</code>.</p>
<p>Amusingly, it turns out there is a baroque way of expressing <code>(&lt;%&lt;)</code> composition with the <em>profunctors</em> vocabulary. <a href="https://hackage.haskell.org/package/profunctors-5.2/docs/Data-Profunctor-Composition.html"><code>Data.Profunctor.Composition</code></a> gives us a notion of profunctor composition:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Procompose</span> p q d c <span class="kw">where</span>
  <span class="dt">Procompose</span><span class="ot"> ::</span> p x c <span class="ot">-&gt;</span> q d x <span class="ot">-&gt;</span> <span class="dt">Procompose</span> p q d c</code></pre></div>
<p><code>Procompose</code> simply pairs two profunctorial values with matching extremities. That is unlike <code>Category</code> composition, which welds two arrows<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a> into one:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(.) ::</span> <span class="dt">Category</span> cat <span class="ot">=&gt;</span> cat b c <span class="ot">-&gt;</span> cat a b <span class="ot">-&gt;</span> cat a c</code></pre></div>
<p>The difference is rather like that between combining functorial layers at type level with <code>Compose</code> and fusing monadic layers with <code>join</code><a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a>.</p>
<p>Among a handful of other interesting things, <code>Data.Functor.Procompose</code> offers <a href="https://hackage.haskell.org/package/profunctors-5.2/docs/Data-Profunctor-Composition.html#v:stars">a <em>lens</em>-style isomorphism</a>…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">stars ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> <span class="dt">Iso'</span> (<span class="dt">Procompose</span> (<span class="dt">Star</span> f) (<span class="dt">Star</span> g) d c) (<span class="dt">Star</span> (<span class="dt">Compose</span> f g) d c)</code></pre></div>
<p>… which gives us a rather lyrical encoding of <code>(&lt;%&lt;)</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Profunctor</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Profunctor.Composition</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Profunctor.Traversing</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Functor.Compose</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Control.Lens</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> f <span class="fu">=</span> <span class="dt">Star</span> <span class="fu">$</span> \x <span class="ot">-&gt;</span> print x <span class="fu">*&gt;</span> pure x
<span class="dt">GHCi</span><span class="fu">&gt;</span> g <span class="fu">=</span> <span class="dt">Star</span> <span class="fu">$</span> \x <span class="ot">-&gt;</span> [<span class="dv">0</span><span class="fu">..</span>x]
<span class="dt">GHCi</span><span class="fu">&gt;</span> getCompose <span class="fu">$</span> runStar (traverse' (view stars (g <span class="ot">`Procompose`</span> f))) [<span class="dv">0</span><span class="fu">..</span><span class="dv">2</span>]
<span class="dv">0</span>
<span class="dv">1</span>
<span class="dv">2</span>
[[<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>],[<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">1</span>],[<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">2</span>],[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>],[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">1</span>],[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>]]</code></pre></div>
<p>If you feel like playing with that, note that <a href="https://hackage.haskell.org/package/profunctors-5.2/docs/Data-Profunctor-Sieve.html"><code>Data.Profunctor.Sieve</code></a> offers a more compact (though prosaic) spelling:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Profunctor.Sieve</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="fu">:</span>t sieve
<span class="ot">sieve ::</span> <span class="dt">Sieve</span> p f <span class="ot">=&gt;</span> p a b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> f b
<span class="dt">GHCi</span><span class="fu">&gt;</span> getCompose <span class="fu">$</span> traverse (sieve (g <span class="ot">`Procompose`</span> f)) [<span class="dv">0</span><span class="fu">..</span><span class="dv">2</span>]
<span class="dv">0</span>
<span class="dv">1</span>
<span class="dv">2</span>
[[<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>],[<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">1</span>],[<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">2</span>],[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>],[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">1</span>],[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>]]</code></pre></div>
<h2 id="further-reading">Further reading</h2>
<ul>
<li><p>The already mentioned <a href="https://arxiv.org/abs/1202.2919"><em>An Investigation of the Laws of Traversals</em></a>, by Mauro Jaskelioff and Ondrej Rypacek, is a fine entry point to the ways of formulating <code>Traversable</code>. It also touches upon some important matters I didn’t explore here, such as how the notion of container <code>Traversable</code> mobilises can be made precise, or the implications of the <code>Traversable</code> laws. I plan to discuss some aspects of these issues in a follow-up post.</p></li>
<li><p>Will Fancher’s <a href="http://elvishjerricco.github.io/2017/03/10/profunctors-arrows-and-static-analysis.html"><em>Profunctors, Arrows, &amp; Static Analysis</em></a> is a good applied introduction to profunctors. In its final sections, it demonstrates some use cases for the <code>Traversing</code> class mentioned here.</p></li>
<li><p>The explanation of profunctor composition in this post is intentionally cursory. If you want to dig deeper, Dan Piponi’s <a href="http://blog.sigfpe.com/2011/07/profunctors-in-haskell.html"><em>Profunctors in Haskell</em></a> can be a starting point. (N.B.: Wherever you see “cofunctor” there, read “contravariant functor” instead). Another option is going to <a href="https://bartoszmilewski.com">Bartosz Milewski’s blog</a> and searching for “profunctor” (most of the results will be relevant).</p></li>
</ul>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>For why that is a good idea, see Gabriel Gonzalez’s <a href="http://www.haskellforall.com/2012/09/the-functor-design-pattern.html"><em>The functor design pattern</em></a>.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>A more proper derivation for the results in this section can be found <a href="http://stackoverflow.com/a/39955475/2751851">in this Stack Overflow answer</a>, which I didn’t transcribe here to avoid boring you.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Suffice, that is, with the help of the trivial data types, <code>()</code> (unit) and <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Void.html"><code>Void</code></a>. As an arbitrary example, <code>Maybe</code> can be encoded using this functor toolkit as <code>Sum (Const ()) Identity</code>.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>The property is an immediate consequence of the free theorem for <code>traverse</code>. Cf. <a href="http://stackoverflow.com/a/32813063/2751851">this Stack Overflow answer by Rein Heinrichs</a>.<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>I mean “arrows” in the general sense, and not necessarily <code>Arrow</code>s as in <a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Arrows.html"><code>Control.Arrow</code></a>!<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>This is not merely a loose analogy. For details, see Bartosz Milewski’s <a href="https://bartoszmilewski.com/2017/02/09/monoids-on-steroids/"><em>Monoids on Steroids</em></a>, and and in particular its section about <code>Arrow</code>s.<a href="#fnref6">↩</a></p></li>
</ol>
</section>

<div id="comment-nav" class="pure-g-r">
  <div class="pure-u-1-5">
    
    
  </div>
  <div class="pure-u-1-5">
    <a id="gh-comments-button" class="pure-button" href="https://github.com/duplode/duplode.github.io/issues/13">Comment on GitHub</a>

    
      
        (see <a href="posts/traversable-a-remix.html#comment-nav">the full post</a> for a reddit link)
      
    
  </div>
  <div class="pure-u-3-5">
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Fri, 19 May 2017 07:30:00 UT</pubDate>
    <guid>http://duplode.github.io/posts/traversable-a-remix.html</guid>
    <dc:creator>Daniel Mlot</dc:creator>
</item>
<item>
    <title>What's in a Fold: The Basic Catamorphism in recursion-schemes</title>
    <link>http://duplode.github.io/posts/whats-in-a-fold.html</link>
    <description><![CDATA[<p>This article is meant as an accessible introduction to the most basic recursion scheme, the catamorphism. It won’t engage in deep dives into theory, or survey practical motives for using recursion schemes – that will be covered by the further reading suggestions at the end. Rather, its main goal is simply offering a concrete presentation of how folds can be generalised. This presentation will be done in terms of the types and combinators used by the <a href="https://hackage.haskell.org/package/recursion-schemes-5.0.1"><em>recursion-schemes</em></a> library, so that the article doubles as an introduction to some of its key conventions.</p>
<div>

</div>
<!--more-->
<h2 id="foldr">foldr</h2>
<p>The primeval example of a fold in Haskell is the right fold of a list.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">foldr<span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>One way of picturing what the first two arguments of <code>foldr</code> are for is seeing them as replacements for the list constructors: the <code>b</code> argument is an initial value corresponding to the empty list, while the binary function incorporates each element prepended through <code>(:)</code> into the result of the fold.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> [a] <span class="fu">=</span> [] <span class="fu">|</span> a <span class="fu">:</span> [a]

foldr (<span class="fu">+</span>) <span class="dv">0</span> [ <span class="dv">1</span> ,  <span class="dv">2</span> ,  <span class="dv">3</span> ]
foldr (<span class="fu">+</span>) <span class="dv">0</span> ( <span class="dv">1</span> <span class="fu">:</span> (<span class="dv">2</span> <span class="fu">:</span> (<span class="dv">3</span> <span class="fu">:</span> [])) )
            ( <span class="dv">1</span> <span class="fu">+</span> (<span class="dv">2</span> <span class="fu">+</span> (<span class="dv">3</span> <span class="fu">+</span> <span class="dv">0</span> )) )</code></pre></div>
<p>By applying this strategy to other data structures, we can get analogous folds for them.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- This is foldr; I have flipped the arguments for cosmetic reasons.</span>
<span class="kw">data</span> [a] <span class="fu">=</span> [] <span class="fu">|</span> (<span class="fu">:</span>) a [a]
<span class="ot">foldList ::</span> b <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b

<span class="co">-- Does this one look familiar?</span>
<span class="kw">data</span> <span class="dt">Maybe</span> a <span class="fu">=</span> <span class="dt">Nothing</span> <span class="fu">|</span> <span class="dt">Just</span> a
<span class="ot">foldMaybe ::</span> b <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> b

<span class="co">-- This is not the definition in Data.List.NonEmpty; the differences</span>
<span class="co">-- between them, however, are superficial.</span>
<span class="kw">data</span> <span class="dt">NEList</span><span class="ot"> ::</span> <span class="dt">NEList</span> a (<span class="dt">Maybe</span> (<span class="dt">NEList</span> a))
<span class="ot">foldNEList ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">NEList</span> a <span class="ot">-&gt;</span> b

<span class="co">-- A binary tree like the one in Diagrams.TwoD.Layout.Tree (and in</span>
<span class="co">-- many other places).</span>
<span class="kw">data</span> <span class="dt">BTree</span> a <span class="fu">=</span> <span class="dt">Empty</span> <span class="fu">|</span> <span class="dt">BNode</span> a (<span class="dt">BTree</span> a) (<span class="dt">BTree</span> a)
<span class="ot">foldBTree ::</span> b <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">BTree</span> a <span class="ot">-&gt;</span> b</code></pre></div>
<p>It would make sense to capture this pattern into an abstraction. At first glance, however, it is not obvious how to do so. Though we know intuitively what the folds above have in common, their type signatures have lots of superficial differences between them. Our immediate goal, then, will be simplifying things by getting rid of these differences.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<h2 id="listf">ListF</h2>
<p>We will sketch the simplification using the tangible and familiar example of lists. Let’s return to the type of <code>foldr</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>With the cosmetic flip I had applied previously, it becomes:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">b <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>The annoying irregularities among the types of the folds in the previous section had to do with the number of arguments other than the data structure (one per constructor) and the types of said arguments (dependent on the shape of each constructor). Though we cannot entirely suppress these differences, we have a few tricks that make it possible to disguise them rather well. The number of extra arguments, for instance, can be always be reduced to just one with sufficient currying:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(b, a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>The first argument is now a pair. We continue by making its two halves more like each other by converting them into unary functions: the first component acquires a dummy <code>()</code> argument, while the second one gets some more currying:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(() <span class="ot">-&gt;</span> b, (a, b) <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>We now have a pair of unary functions with result type <code>b</code>. A pair of functions with the same result type, however, is equivalent to a single function from <code>Either</code> one of the argument types (if you are sceptical about that, you might want to work out the isomorphism – that is, the pair of conversion functions – that witnesses this fact):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Either</span> () (a, b) <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>At this point, the only extra argument of the fold is an unary function with result type <code>b</code>. We have condensed the peculiarities of the original arguments at a single place (the argument of said function), which makes the overall shape of the signature a lot simpler. Since it can be awkward to work with anonymous nestings of <code>Either</code> and pairs, we will replace <code>Either () (a, b)</code> with an equivalent type equipped with suggestive names:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">ListF</span> a b <span class="fu">=</span>  <span class="dt">Nil</span> <span class="fu">|</span> <span class="dt">Cons</span> a b
<span class="co">--            Left () | Right (a,b)</span></code></pre></div>
<p>That leaves us with:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">ListF</span> a b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>The most important fact about <code>ListF</code> is that it mirrors the shape of the list type except for one crucial difference…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> []    a   <span class="fu">=</span> []  <span class="fu">|</span> (<span class="fu">:</span>)  a [a]
<span class="kw">data</span> <span class="dt">ListF</span> a b <span class="fu">=</span> <span class="dt">Nil</span> <span class="fu">|</span> <span class="dt">Cons</span> a b</code></pre></div>
<p>… namely, <em>it is not recursive</em>. An <code>[a]</code> value built with <code>(:)</code> has another <code>[a]</code> in itself, but a <code>ListF a b</code> built with <code>Cons</code> does not contain another <code>ListF a b</code>. To put it in another way, <code>ListF</code> is the outcome of taking away the recursive nesting in the list data type and filling the resulting hole with a placeholder type, the <code>b</code> in our signatures, that corresponds to the result of the fold. This strategy can be used to obtain a <code>ListF</code> analogue for any other data structure. You might, for instance, try it with the <code>BTree a</code> type shown in the first section.</p>
<h2 id="cata">cata</h2>
<p>We have just learned that the list <code>foldr</code> can be expressed using this signature:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">ListF</span> a b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>We might figure out a <code>foldr</code> implementation with this signature in a mechanical way, by throwing all of the tricks from the previous section at <code>Data.List.foldr</code> until we squeeze out something with the right type. It is far more illuminating, however, to start from scratch. If we go down that route, the first question that arises is how to apply a <code>ListF a b -&gt; b</code> function to an <code>[a]</code>. It is clear that the list must somehow be converted to a <code>ListF a b</code>, so that the function can be applied to it.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">foldList ::</span> (<span class="dt">ListF</span> a b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b
foldList f <span class="fu">=</span> f <span class="fu">.</span> something
<span class="co">-- foldList f xs = f (something xs)</span>
<span class="co">-- something :: [a] -&gt; ListF a b</span></code></pre></div>
<p>We can get part of the way there by recalling how <code>ListF</code> mirrors the shape of the list type. That being so, going from <code>[a]</code> to <code>ListF a [a]</code> is just a question of matching the corresponding constructors.<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">project ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">ListF</span> a [a]
project <span class="fu">=</span> \<span class="kw">case</span>
    [] <span class="ot">-&gt;</span> <span class="dt">Nil</span>
    x<span class="fu">:</span>xs <span class="ot">-&gt;</span> <span class="dt">Cons</span> x xs

<span class="ot">foldList ::</span> (<span class="dt">ListF</span> a b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b
foldList f <span class="fu">=</span> f <span class="fu">.</span> something <span class="fu">.</span> project
<span class="co">-- something :: ListF a [a] -&gt; ListF a b</span></code></pre></div>
<p><code>project</code> witnesses the simple fact that, given that <code>ListF a b</code> is the <code>[a]</code> except with a <code>b</code> placeholder in the tail position, where there would be a nested <code>[a]</code>, if we plug the placeholder with <code>[a]</code> we get something equivalent to the <code>[a]</code> list type we began with.</p>
<p>We now need to go from <code>ListF a [a]</code> to <code>ListF a b</code>; in other words, we have to change the <code>[a]</code> inside <code>ListF</code> into a <code>b</code>. And sure enough, we do have a function from <code>[a]</code> to <code>b</code>…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">foldList ::</span> (<span class="dt">ListF</span> a b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> ([a] <span class="ot">-&gt;</span> b)
<span class="ot">f ::</span> <span class="dt">ListF</span> a b <span class="ot">-&gt;</span> b
foldList<span class="ot"> f ::</span> [a] <span class="ot">-&gt;</span> b</code></pre></div>
<p>… the fold itself! To conveniently reach inside <code>ListF a b</code>, we set up a <code>Functor</code> instance:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">ListF</span> a) <span class="kw">where</span>
    fmap f <span class="fu">=</span> \<span class="kw">case</span>
        <span class="dt">Nil</span> <span class="ot">-&gt;</span> <span class="dt">Nil</span>
        <span class="dt">Cons</span> x y <span class="ot">-&gt;</span> <span class="dt">Cons</span> x (f y)

<span class="ot">foldList ::</span> (<span class="dt">ListF</span> a b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b
foldList f <span class="fu">=</span> f <span class="fu">.</span> fmap (foldList f) <span class="fu">.</span> project</code></pre></div>
<p>And there it is, the list fold. First, <code>project</code> exposes the list (or, more precisely, its first constructor) to our machinery; then, the tail of the list (if there is one – what happens if there isn’t?) is recursively folded through the <code>Functor</code> instance of <code>ListF</code>; finally, the overall result is obtained by applying <code>f</code> to the resulting <code>ListF a b</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- A simple demonstration of foldList in action.</span>
<span class="ot">f ::</span> <span class="dt">ListF</span> a b <span class="ot">-&gt;</span> b
f <span class="fu">=</span> \<span class="kw">case</span> { <span class="dt">Nil</span> <span class="ot">-&gt;</span> <span class="dv">0</span>; <span class="dt">Cons</span> x y <span class="ot">-&gt;</span> x <span class="fu">+</span> y }

foldList f [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]
<span class="co">-- Let's try and evaluate this by hand.</span>
foldList f (<span class="dv">1</span> <span class="fu">:</span> <span class="dv">2</span> <span class="fu">:</span> <span class="dv">3</span> <span class="fu">:</span> [])
f <span class="fu">.</span> fmap (foldList f) <span class="fu">.</span> project <span class="fu">$</span> (<span class="dv">1</span> <span class="fu">:</span> <span class="dv">2</span> <span class="fu">:</span> <span class="dv">3</span> <span class="fu">:</span> [])
f <span class="fu">.</span> fmap (foldList f) <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (<span class="dv">2</span> <span class="fu">:</span> <span class="dv">3</span> <span class="fu">:</span> [])
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (foldList f (<span class="dv">2</span> <span class="fu">:</span> <span class="dv">3</span> <span class="fu">:</span> []))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">.</span> fmap (foldList f) <span class="fu">$</span> project (<span class="dv">2</span> <span class="fu">:</span> <span class="dv">3</span> <span class="fu">:</span> []))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">.</span> fmap (foldList f) <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (<span class="dv">3</span> <span class="fu">:</span> []))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (foldList f (<span class="dv">3</span> <span class="fu">:</span> [])))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (f <span class="fu">.</span> fmap (foldList f) <span class="fu">.</span> project <span class="fu">$</span> (<span class="dv">3</span> <span class="fu">:</span> [])))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (f <span class="fu">.</span> fmap (foldList f) <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">3</span> []))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">3</span> (foldList f [])))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">3</span> (f <span class="fu">.</span> fmap (foldList f) <span class="fu">.</span> project <span class="fu">$</span> [])))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">3</span> (f <span class="fu">.</span> fmap (foldList f) <span class="fu">$</span> <span class="dt">Nil</span>)))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">3</span> (f <span class="fu">$</span> <span class="dt">Nil</span>)))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">3</span> <span class="dv">0</span>))
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> (f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">2</span> <span class="dv">3</span>)
f <span class="fu">$</span> <span class="dt">Cons</span> <span class="dv">1</span> <span class="dv">5</span>
<span class="dv">6</span></code></pre></div>
<p>One interesting thing about our definition of <code>foldList</code> is that all the list-specific details are tucked within the implementations of <code>project</code>, <code>fmap</code> for <code>ListF</code> and <code>f</code> (whatever it is). That being so, if we look only at the implementation and not at the signature, we find no outward signs of anything related to lists. No outward signs, that is, except for the name we gave the function. That’s easy enough to solve, though: it is just a question of inventing a new one:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cata f <span class="fu">=</span> f <span class="fu">.</span> fmap (cata f) <span class="fu">.</span> project</code></pre></div>
<p><code>cata</code> is short for <em>catamorphism</em>, the fancy name given to ordinary folds in the relevant theory. There is a function called <code>cata</code> in <em>recursion-schemes</em>. <a href="https://hackage.haskell.org/package/recursion-schemes-5.0.1/docs/Data-Functor-Foldable.html#t:Recursive">Its implementation</a>…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cata f <span class="fu">=</span> c <span class="kw">where</span> c <span class="fu">=</span> f <span class="fu">.</span> fmap c <span class="fu">.</span> project</code></pre></div>
<p>… is the same as ours, almost down to the last character. Its type signature, however, is much more general:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">cata ::</span> <span class="dt">Recursive</span> t <span class="ot">=&gt;</span> (<span class="dt">Base</span> t b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> t <span class="ot">-&gt;</span> b</code></pre></div>
<p>It involves, in no particular order:</p>
<ul>
<li><p><code>b</code>, the type of the result of the fold;</p></li>
<li><p><code>t</code>, the type of the data structure being folded. In our example, <code>t</code> would be <code>[a]</code>; or, as GHC would put it, <code>t ~ [a]</code>.</p></li>
<li><p><code>Base</code>, a type family that generalises what we did with <code>[a]</code> and <code>ListF</code> by assigning <em>base functors</em> to data types. We can read <code>Base t</code> as “the base functor of <code>t</code>”; in our example, we have <code>Base   [a] ~ ListF a</code>.</p></li>
<li><p><code>Recursive</code>, a type class whose minimal definition consists of <code>project</code>, with the type of <code>project</code> now being <code>t -&gt; Base t t</code>.</p></li>
</ul>
<p>The base functor is supposed to be a <code>Functor</code>, so that we can use <code>fmap</code> on it. That is enforced through a <code>Functor (Base t)</code> constraint in the definition of the <code>Recursive</code> class. Note, however, that there is no such restriction on <code>t</code> itself: it doesn’t need to be a polymorphic type, or even to involve a type constructor.</p>
<p>In summary, once we managed to concentrate the surface complexity in the signature of <code>foldr</code> at a single place, the <code>ListF a b -&gt; b</code> function, an opportunity to generalise it revealed itself. Incidentally, that function, and more generally any <code>Base t b -&gt; b</code> function that can be given to <code>cata</code>, is referred to as an <em>algebra</em>. In this context, the term “algebra” is meant in a precise technical sense; still, we can motivate it with a legitimate recourse to intuition. In basic school algebra, we use certain rules to get simpler expressions out of more complicated ones, such as <span class="math inline"><em>a</em><em>x</em> + <em>b</em><em>x</em> = (<em>a</em> + <em>b</em>)<em>x</em></span>. Similarly, a <code>Base t b -&gt; b</code> algebra boils down to a set of rules that tell us what to do to get a <code>b</code> result out of the <code>Base t b</code> we are given at each step of the fold.</p>
<h2 id="fix">Fix</h2>
<p>The <code>cata</code> function we ended up with in the previous section…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">cata ::</span> <span class="dt">Recursive</span> t <span class="ot">=&gt;</span> (<span class="dt">Base</span> t b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> t <span class="ot">-&gt;</span> b
cata f <span class="fu">=</span> c <span class="kw">where</span> c <span class="fu">=</span> f <span class="fu">.</span> fmap c <span class="fu">.</span> project</code></pre></div>
<p>… is perfectly good for practical purposes: it allows us to fold anything that we can give a <code>Base</code> functor and a corresponding <code>project</code>. Not only that, the implementation of <code>cata</code> is very elegant. And yet, a second look at its signature suggests that there might be an even simpler way of expressing <code>cata</code>. The signature uses both <code>t</code> and <code>Base t b</code>. As we have seen for the <code>ListF</code> example, these two types are very similar (their shapes match except for recursiveness), and so using both in the same signature amounts to encoding the same information in two different ways – perhaps unnecessarily so.</p>
<p>In the implementation of <code>cata</code>, it is specifically <code>project</code> that links <code>t</code> and <code>Base t b</code>, as it translates the constructors from one type to the other.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">project (<span class="dv">1</span> <span class="fu">:</span> <span class="dv">2</span> <span class="fu">:</span> <span class="dv">3</span> <span class="fu">:</span> [])
<span class="dt">Cons</span> <span class="dv">1</span> (<span class="dv">2</span> <span class="fu">:</span> <span class="dv">3</span> <span class="fu">:</span> [])</code></pre></div>
<p>Now, let’s look at what happens once we repeatedly expand the definition of <code>cata</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">c <span class="fu">=</span> cata f
p <span class="fu">=</span> project
                                c
                         f <span class="fu">.</span> fmap c <span class="fu">.</span> p
               f <span class="fu">.</span> fmap (f <span class="fu">.</span> fmap c <span class="fu">.</span> p) <span class="fu">.</span> p
     f <span class="fu">.</span> fmap (f <span class="fu">.</span> fmap (f <span class="fu">.</span> fmap c <span class="fu">.</span> p) <span class="fu">.</span> p) <span class="fu">.</span> p
f <span class="fu">.</span> fmap (   <span class="fu">.</span>   <span class="fu">.</span>   <span class="fu">.</span>   f <span class="fu">.</span> fmap c <span class="fu">.</span> p   <span class="fu">.</span>   <span class="fu">.</span>   <span class="fu">.</span>   ) <span class="fu">.</span> p</code></pre></div>
<p>This continues indefinitely. The fold terminates when, at some point, <code>fmap c</code> does nothing (in the case of <code>ListF</code>, that happens when we get to a <code>Nil</code>). Note, however, that even at that point we can carry on expanding the definition, merrily introducing do-nothing operations for as long as we want.</p>
<p>At the right side of the expanded expression, we have a chain of increasingly deep <code>fmap</code>-ped applications of <code>project</code>:<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.</span>   <span class="fu">.</span>   <span class="fu">.</span>   fmap (fmap project) <span class="fu">.</span> fmap project <span class="fu">.</span> project</code></pre></div>
<p>If we could factor that out into a separate function, it would change a <code>t</code> data structure into something equivalent to it, but built with the <code>Base t</code> constructors:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="fu">:</span>{
<span class="dt">GHCi</span><span class="fu">|</span> fmap (fmap (fmap project))
<span class="dt">GHCi</span><span class="fu">|</span>     <span class="fu">.</span> fmap (fmap project) <span class="fu">.</span> fmap project <span class="fu">.</span> project
<span class="dt">GHCi</span><span class="fu">|</span>     <span class="fu">$</span> <span class="dv">1</span> <span class="fu">:</span> <span class="dv">2</span> <span class="fu">:</span> <span class="dv">3</span> <span class="fu">:</span> []
<span class="dt">GHCi</span><span class="fu">|</span> <span class="fu">:</span>}
<span class="dt">Cons</span> <span class="dv">1</span> (<span class="dt">Cons</span> <span class="dv">2</span> (<span class="dt">Cons</span> <span class="dv">3</span> <span class="dt">Nil</span>))</code></pre></div>
<p>We would then be able to regard this conversion as a preliminary, relatively uninteresting step that precedes the application of a slimmed down <code>cata</code>, that doesn’t use neither <code>project</code> nor the <code>t</code> type.<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cata f <span class="fu">=</span> leanCata f <span class="fu">.</span> omniProject</code></pre></div>
<p>Defining <code>omniProject</code> seems simple once we notice the self-similarity in the chain of <code>project</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">omniProject <span class="fu">=</span> <span class="fu">.</span>   <span class="fu">.</span>   <span class="fu">.</span>   fmap (fmap project) <span class="fu">.</span> fmap project <span class="fu">.</span> project
omniProject <span class="fu">=</span> fmap (fmap (   <span class="fu">.</span>   <span class="fu">.</span>   <span class="fu">.</span>   project) <span class="fu">.</span> project) <span class="fu">.</span> project
omniProject <span class="fu">=</span> fmap omniProject <span class="fu">.</span> project</code></pre></div>
<p>Guess what happens next:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> omniProject <span class="fu">=</span> fmap omniProject <span class="fu">.</span> project

<span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">502</span><span class="fu">:</span><span class="dv">16</span><span class="fu">:</span> error<span class="fu">:</span>
    • <span class="dt">Occurs</span> check<span class="fu">:</span> cannot construct the infinite <span class="kw">type</span><span class="fu">:</span> b <span class="fu">~</span> <span class="dt">Base</span> t b
      <span class="dt">Expected</span> <span class="kw">type</span><span class="fu">:</span> t <span class="ot">-&gt;</span> b
        <span class="dt">Actual</span> <span class="kw">type</span><span class="fu">:</span> t <span class="ot">-&gt;</span> <span class="dt">Base</span> t b
    • <span class="dt">In</span> the expression<span class="fu">:</span> fmap omniProject <span class="fu">.</span> project
      <span class="dt">In</span> an equation for ‘omniProject’<span class="fu">:</span>
          omniProject <span class="fu">=</span> fmap omniProject <span class="fu">.</span> project
    • <span class="dt">Relevant</span> bindings include
<span class="ot">        omniProject ::</span> t <span class="ot">-&gt;</span> b (bound at <span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">502</span><span class="fu">:</span><span class="dv">1</span>)</code></pre></div>
<p>GHCi complains about an “infinite type”, and that is entirely appropriate. Every <code>fmap</code>-ped <code>project</code> changes the type of the result by introducing a new layer of <code>Base t</code>. That being so, the type of <code>omniProject</code> would be…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">omniProject ::</span> <span class="dt">Recursive</span> t <span class="ot">=&gt;</span> t <span class="ot">-&gt;</span> <span class="dt">Base</span> t (<span class="dt">Base</span> t (<span class="dt">Base</span> t (  <span class="fu">.</span>  <span class="fu">.</span>  <span class="fu">.</span></code></pre></div>
<p>… which is clearly a problem, as we don’t have a type that encodes an infinite nesting of type constructors. There is a simple way of solving that, though: we <em>make up</em> the type we want!</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Fix</span> f <span class="fu">=</span> <span class="dt">Fix</span> (f (<span class="dt">Fix</span> f))

<span class="ot">unfix ::</span> <span class="dt">Fix</span> f <span class="ot">-&gt;</span> f (<span class="dt">Fix</span> f)
unfix (<span class="dt">Fix</span> f) <span class="fu">=</span> f</code></pre></div>
<p>If we read <code>Fix f</code> as “infinite nesting of <code>f</code>”, the right-hand side of the <code>newtype</code> definition just above reads “an infinite nesting of <code>f</code> contains an <code>f</code> of infinite nestings of <code>f</code>”, which is an entirely reasonable encoding of such a thing.<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a></p>
<p>All we need to make our tentative definition of <code>omniProject</code> legal Haskell is wrapping the whole thing in a <code>Fix</code>. The recursive <code>fmap</code>-ping will ensure <code>Fix</code> is applied at all levels:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">omniProject ::</span> <span class="dt">Recursive</span> t <span class="ot">=&gt;</span> t <span class="ot">-&gt;</span> <span class="dt">Fix</span> (<span class="dt">Base</span> t)
omniProject <span class="fu">=</span> <span class="dt">Fix</span> <span class="fu">.</span> fmap omniProject <span class="fu">.</span> project</code></pre></div>
<p>Another glance at the definition of <code>cata</code> shows that this is just <code>cata</code> using <code>Fix</code> as the algebra:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">omniProject <span class="fu">=</span> cata <span class="dt">Fix</span></code></pre></div>
<p>That being so, <code>cata Fix</code> will change anything with a <code>Recursive</code> instance into its <code>Fix</code>-wearing form:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> cata <span class="dt">Fix</span> [<span class="dv">0</span><span class="fu">..</span><span class="dv">9</span>]
<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">0</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">1</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">2</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">3</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">4</span> (
<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">5</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">6</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">7</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">8</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">9</span> (
<span class="dt">Fix</span> <span class="dt">Nil</span>))))))))))))))))))))</code></pre></div>
<p>Defining a <code>Fix</code>-style structure from scratch, without relying on a <code>Recursive</code> instance, is just a question of introducing <code>Fix</code> in the appropriate places. For extra convenience, you might want to define “smart constructors” like these two:<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">nil ::</span> <span class="dt">Fix</span> (<span class="dt">ListF</span> a)
nil <span class="fu">=</span> <span class="dt">Fix</span> <span class="dt">Nil</span>

<span class="ot">cons ::</span> a <span class="ot">-&gt;</span> <span class="dt">Fix</span> (<span class="dt">ListF</span> a) <span class="ot">-&gt;</span> <span class="dt">Fix</span> (<span class="dt">ListF</span> a)
cons x xs <span class="fu">=</span> <span class="dt">Fix</span> (<span class="dt">Cons</span> x xs)</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="dv">1</span> <span class="ot">`cons`</span> (<span class="dv">2</span> <span class="ot">`cons`</span> (<span class="dv">3</span> <span class="ot">`cons`</span> nil))
<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">1</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">2</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">3</span> (<span class="dt">Fix</span> <span class="dt">Nil</span>))))))</code></pre></div>
<p>Before we jumped into this <code>Fix</code> rabbit hole, we were trying to find a <code>leanCata</code> function such that:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cata f <span class="fu">=</span> leanCata f <span class="fu">.</span> omniProject</code></pre></div>
<p>We can now easily define <code>leanCata</code> by mirroring what we have done for <code>omniProject</code>: first, we get rid of the <code>Fix</code> wrapper; then, we fill in the other half of the definition of <code>cata</code> that we left behind when we extracted <code>omniProject</code> – that is, the repeated application of <code>f</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">leanCata f <span class="fu">=</span> f <span class="fu">.</span> fmap (leanCata f) <span class="fu">.</span> unfix</code></pre></div>
<p>(It is possible to prove that this <em>must</em> be the definition of <code>leanCata</code> using the definitions of <code>cata</code> and <code>omniProject</code> and the <code>cata f = leanCata f . omniProject</code> specification. You might want to work it out yourself; alternatively, you can find the derivation in an appendix at the end of this article.)</p>
<p>What should be the type of <code>leanCata</code>? <code>unfix</code> calls for a <code>Fix f</code>, and <code>fmap</code> demands this <code>f</code> to be a <code>Functor</code>. As the definition doesn’t use <code>cata</code> or <code>project</code>, there is no need to involve <code>Base</code> or <code>Recursive</code>. That being so, we get:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">leanCata ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (f b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Fix</span> f <span class="ot">-&gt;</span> b
leanCata f <span class="fu">=</span> f <span class="fu">.</span> fmap (leanCata f) <span class="fu">.</span> unfix</code></pre></div>
<p>This is how you will usually see <code>cata</code> being defined in other texts about the subject.<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a></p>
<p>Similarly to what we have seen for <code>omniProject</code>, the implementation of <code>leanCata</code> looks a lot like the <code>cata</code> we began with, except that it has <code>unfix</code> where <code>project</code> used to be. And sure enough, <em>recursion-schemes</em> defines…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Base</span> (<span class="dt">Fix</span> f) <span class="fu">=</span> f

<span class="kw">instance</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> <span class="dt">Recursive</span> (<span class="dt">Fix</span> f) <span class="kw">where</span>
  project (<span class="dt">Fix</span> a) <span class="fu">=</span> a</code></pre></div>
<p>… so that its <code>cata</code> also works as <code>leanCata</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> foo <span class="fu">=</span> <span class="dv">1</span> <span class="ot">`cons`</span> (<span class="dv">2</span> <span class="ot">`cons`</span> (<span class="dv">3</span> <span class="ot">`cons`</span> nil))
<span class="dt">GHCi</span><span class="fu">&gt;</span> foo
<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">1</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">2</span> (<span class="dt">Fix</span> (<span class="dt">Cons</span> <span class="dv">3</span> (<span class="dt">Fix</span> <span class="dt">Nil</span>))))))
<span class="dt">GHCi</span><span class="fu">&gt;</span> cata (\<span class="kw">case</span> {<span class="dt">Nil</span> <span class="ot">-&gt;</span> <span class="dv">1</span>; <span class="dt">Cons</span> x y <span class="ot">-&gt;</span> x <span class="fu">*</span> y}) foo
<span class="dv">6</span></code></pre></div>
<p>In the end, we did manage to get a tidier <code>cata</code>. Crucially, we now also have a clear picture of folding, the fundamental way of consuming a data structure recursively. On the one hand, any fold can be expressed in terms of an algebra for the base functor of the structure being folded by the means of a simple function, <code>cata</code>. On the other hand, the relationship between data structures and their base functors is made precise through <code>Fix</code>, which introduces recursion into functors in a way that captures the essence of recursiveness of data types.</p>
<p>To wrap things up, here a few more questions for you to ponder:</p>
<ul>
<li><p>Does the data structure that we get by using <code>Maybe</code> as a base functor correspond to anything familiar? Use <code>cata</code> to write a fold that does something interesting with it.</p></li>
<li><p>What could possibly be the base functor of a non-recursive data structure?</p></li>
<li><p>Find <em>two</em> base functors that give rise to non-empty lists. One of them corresponds directly to the <code>NEList</code> definition given at the beginning of this article.</p></li>
<li><p>As we have discussed, <code>omniProject</code>/<code>cata Fix</code> can be used to losslessly convert a data structure to the corresponding <code>Fix</code>-encoded form. Write the other half of the isomorphism for lists; that is, the function that changes a <code>Fix (ListF a)</code> back into an <code>[a]</code>.</p></li>
</ul>
<h2 id="closing-remarks">Closing remarks</h2>
<p>When it comes to recursion schemes, there is a lot more to play with than just the fundamental catamorphism that we discussed here. In particular, <em>recursion-schemes</em> offers all sorts of specialised folds (and <em>un</em>folds), often with richly decorated type signatures meant to express more directly some particular kind of recursive (or <em>co</em>recursive) algorithm. But that’s a story for another time. For now, I will just make a final observation about unfolds.</p>
<p>Intuitively, an unfold is the opposite of a fold – while a fold consumes a data structure to produce a result, an unfold generates a data structure from a seed. In recursion schemes parlance, the intuition is made precise by the notion of <em>anamorphism</em>, a counterpart (technically, a <em>dual</em>) to the catamorphism. Still, if we have a look at <code>unfoldr</code> in <code>Data.List</code>, the exact manner in which it is opposite to <code>foldr</code> is not immediately obvious from its signature.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">unfoldr ::</span> (b <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (a, b)) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a]</code></pre></div>
<p>One way of clarifying that is considering the first argument of <code>unfoldr</code> from the same perspective that we used to uncover <code>ListF</code> early in this article.</p>
<h2 id="further-reading">Further reading</h2>
<ul>
<li><p><a href="https://www.schoolofhaskell.com/user/bartosz/understanding-algebras"><em>Understanding F-Algebras</em></a>, by Bartosz Milewski, covers similar ground to this article from an explicitly categorical perspective. A good follow-up read for sharpening your picture of the key concepts we have discussed here.</p></li>
<li><p><a href="http://blog.sumtypeofway.com/an-introduction-to-recursion-schemes/"><em>An Introduction to Recursion Schemes</em></a>, by Patrick Thompson, is the first in a series of three articles that present some common recursion schemes at a gentle pace. You will note that examples involving syntax trees and simplifying expressions are a running theme across these articles. That is in line with what we said about the word “algebra” at the end of the section about <code>cata</code>.</p></li>
<li><p><a href="https://jtobin.io/practical-recursion-schemes"><em>Practical Recursion Schemes</em></a>, by Jared Tobin, offers a faster-paced demonstration of basic recursion schemes. Unlike the other articles in this list, it explores the machinery of the <em>recursion-schemes</em> library that we have dealt with here.</p></li>
<li><p><a href="http://maartenfokkinga.github.io/utwente/#detail_0000003415">*Functional Programming With Bananas, Lenses, Envelopes and Barbed Wire</a>, by Erik Meijer, Maarten Fokkinga and Ross Paterson, is a classic paper about recursion schemes, the one which popularised concepts such as catamorphism and anamorphism. If you plan to go through it, you may find <a href="http://blog.ezyang.com/2010/05/bananas-lenses-envelopes-and-barbed-wire-a-translation-guide/">this key to its notation</a> by Edward Z. Yang useful.</p></li>
</ul>
<h2 id="appendix-leancata">Appendix: leanCata</h2>
<p>This is the derivation mentioned in the middle of the section about <code>Fix</code>. We begin from our specification for <code>leanCata</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cata f <span class="fu">=</span> leanCata f <span class="fu">.</span> omniProject</code></pre></div>
<p>Take the left-hand side and substitute the definition of <code>cata</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f <span class="fu">.</span> fmap (cata f) <span class="fu">.</span> project</code></pre></div>
<p>Substitute the right-hand side of the <code>leanCata</code> specification:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f <span class="fu">.</span> fmap (leanCata f <span class="fu">.</span> omniProject) <span class="fu">.</span> project</code></pre></div>
<p>By the second functor law:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f <span class="fu">.</span> fmap (leanCata f) <span class="fu">.</span> fmap omniProject <span class="fu">.</span> project</code></pre></div>
<p><code>unfix . Fix = id</code>, so we can slip it in like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f <span class="fu">.</span> fmap (leanCata f) <span class="fu">.</span> unfix <span class="fu">.</span> <span class="dt">Fix</span> <span class="fu">.</span> fmap omniProject <span class="fu">.</span> project</code></pre></div>
<p>Substituting the definition of <code>omniProject</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f <span class="fu">.</span> fmap (leanCata f) <span class="fu">.</span> unfix <span class="fu">.</span> omniProject</code></pre></div>
<p>Substituting this back into the specification:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f <span class="fu">.</span> fmap (leanCata f) <span class="fu">.</span> unfix <span class="fu">.</span> omniProject <span class="fu">=</span> leanCata f <span class="fu">.</span> omniProject</code></pre></div>
<p>Assuming a sensible <code>Recursive</code> and <code>Base</code> instances for <code>t</code>, <code>t</code> and <code>Fix (Base t)</code> should be isomorphic (that is, losslessly interconvertible) types, with <code>omniProject</code> performing one of the two relevant conversions. As a consequence, <code>omniProject</code> is surjective (that is, it is possible to obtain every <code>Fix (Base t)</code> value through it). That being so, we can “cancel out” the <code>omniProject</code>s at the right end of both sides of the equation above. The definition of <code>leanCata</code> follows immediately.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f <span class="fu">.</span> fmap (leanCata f) <span class="fu">.</span> unfix <span class="fu">=</span> leanCata f</code></pre></div>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>By the way, it is worth emphasising that the <code>Foldable</code> class from <em>base</em> is not the abstraction we are looking for. One way of seeing why is placing the signature of <code>foldBTree</code> side by side with the one of <code>Foldable.foldr</code>.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>In what follows, I will use the <code>LambdaCase</code> extension liberally, so that I have fewer boring variable names to make up. If you haven’t seen it yet, all you need to know is that…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">\<span class="kw">case</span>
    [] <span class="ot">-&gt;</span> foo
    x<span class="fu">:</span>xs <span class="ot">-&gt;</span> bar</code></pre></div>
<p>… is the same as:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">\list <span class="ot">-&gt;</span> <span class="kw">case</span> list <span class="kw">of</span>
    [] <span class="ot">-&gt;</span> foo
    x<span class="fu">:</span>xs <span class="ot">-&gt;</span> bar</code></pre></div>
<a href="#fnref2">↩</a></li>
<li id="fn3"><p>While that is clear to the naked eye, it can be shown more rigorously by applying the second functor law, that is:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap (g <span class="fu">.</span> f) <span class="fu">=</span> fmap g <span class="fu">.</span> fmap f</code></pre></div>
<a href="#fnref3">↩</a></li>
<li id="fn4"><p>This is in some ways similar to how <code>(&gt;&gt;= f) = join . fmap f</code> can be read as a factoring of <code>(&gt;&gt;=)</code> into a preliminary step (<code>fmap f</code>) followed by the quintessential monadic operation (<code>join</code>).<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>The name <code>Fix</code> comes from “fixed point”, the mathematical term used to describe a value which is left unchanged by some function. In this case, if we have an infinite nesting of the <code>f</code> type constructor, it doesn’t make any difference if we apply <code>f</code> to it one more time.<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>As suggested by Jared Tobin’s <em>Practical Recursion Schemes</em> article, which is in the further reading list at the end of this post.<a href="#fnref6">↩</a></p></li>
<li id="fn7"><p>The names in said texts tend to be different, though. Common picks include <code>μ</code> for the <code>Fix</code> type constructor, <code>In</code> for the <code>Fix</code> value constructor, <code>out</code> for <code>unfix</code>, and <code>⦇f⦈</code> for <code>leanCata f</code> (using the famed banana brackets).<a href="#fnref7">↩</a></p></li>
</ol>
</section>

<div id="comment-nav" class="pure-g-r">
  <div class="pure-u-1-5">
    
    
  </div>
  <div class="pure-u-1-5">
    <a id="gh-comments-button" class="pure-button" href="https://github.com/duplode/duplode.github.io/issues/12">Comment on GitHub</a>

    
      
        (see <a href="posts/whats-in-a-fold.html#comment-nav">the full post</a> for a reddit link)
      
    
  </div>
  <div class="pure-u-3-5">
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Fri, 10 Mar 2017 06:00:00 UT</pubDate>
    <guid>http://duplode.github.io/posts/whats-in-a-fold.html</guid>
    <dc:creator>Daniel Mlot</dc:creator>
</item>
<item>
    <title>Casual Hacking With stack, Reloaded</title>
    <link>http://duplode.github.io/posts/casual-hacking-with-stack-reloaded.html</link>
    <description><![CDATA[<p>It has been quite a while since I <a href="../posts/casual-hacking-with-stack.html">wrote</a> about how to use stack for casual play outside of the context of a conventional Haskell project. In the meantime, stack has gained a feature called the <em>global project</em> which in many cases makes it possible to do quick experiments with essentially no setup, while still taking advantage of the infrastructure provided through stack.</p>
<div>

</div>
<!--more-->
<p>The global project consists of a <code>stack.yaml</code> file and an associated <code>.stack-work</code> directory, which are kept in <code>~/.stack/global-project</code> and are used by stack whenever there is no other <code>stack.yaml</code> lying around. The <code>stack.yaml</code> of the global project specifies a resolver, just like any other <code>stack.yaml</code>. If said resolver is a snapshot you use elsewhere, you get access to all packages you have installed from that snapshot with zero configuration.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="bu">pwd</span>
<span class="ex">/home/duplode</span>
$ <span class="fu">ls</span> -lrt <span class="kw">|</span> <span class="fu">grep</span> stack.yaml
$ <span class="ex">stack</span> ghci
<span class="ex">Configuring</span> GHCi with the following packages: 
<span class="ex">GHCi</span>, version 8.0.1: http://www.haskell.org/ghc/  :? for help
<span class="ex">Loaded</span> GHCi configuration from /home/duplode/.ghci
<span class="ex">Loaded</span> GHCi configuration from /tmp/ghci22741/ghci-script
<span class="ex">GHCi</span><span class="op">&gt;</span> import Control.Lens
<span class="ex">GHCi</span><span class="op">&gt;</span> (1,2) ^<span class="bu">.</span> <span class="ex">_1</span>
<span class="ex">1</span></code></pre></div>
<p>By the way, this also holds for the stack-powered <a href="http://commercialhaskell.github.io/intero/">Intero</a> Emacs mode, which makes it possible to simply open a new <code>*.hs</code> file anywhere and immediately start hacking away.</p>
<p>What about packages you didn’t install beforehand? They are no problem, thanks to the <code>--package</code> option of <code>stack ghci</code>, which allows installing snapshot packages at a whim.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">stack</span> ghci --package fmlist
<span class="ex">fmlist-0.9</span>: download
<span class="ex">fmlist-0.9</span>: configure
<span class="ex">fmlist-0.9</span>: build
<span class="ex">fmlist-0.9</span>: copy/register
<span class="ex">Configuring</span> GHCi with the following packages: 
<span class="ex">GHCi</span>, version 8.0.1: http://www.haskell.org/ghc/  :? for help
<span class="ex">Loaded</span> GHCi configuration from /home/duplode/.ghci
<span class="ex">Loaded</span> GHCi configuration from /tmp/ghci22828/ghci-script
<span class="ex">GHCi</span><span class="op">&gt;</span> import qualified Data.FMList as FM
<span class="ex">GHCi</span><span class="op">&gt;</span> FM.foldMapA (\x -<span class="op">&gt;</span> show <span class="op">&lt;</span>$<span class="op">&gt;</span> [0..x]) [<span class="ex">0..3</span>]
[<span class="st">&quot;0000&quot;</span>,<span class="st">&quot;0001&quot;</span>,<span class="st">&quot;0002&quot;</span>,<span class="st">&quot;0003&quot;</span>,<span class="st">&quot;0010&quot;</span>,<span class="st">&quot;0011&quot;</span>,<span class="st">&quot;0012&quot;</span>,<span class="st">&quot;0013&quot;</span>,<span class="st">&quot;0020&quot;</span>,<span class="st">&quot;0021&quot;</span>,
<span class="st">&quot;0022&quot;</span>,<span class="st">&quot;0023&quot;</span>,<span class="st">&quot;0100&quot;</span>,<span class="st">&quot;0101&quot;</span>,<span class="st">&quot;0102&quot;</span>,<span class="st">&quot;0103&quot;</span>,<span class="st">&quot;0110&quot;</span>,<span class="st">&quot;0111&quot;</span>,<span class="st">&quot;0112&quot;</span>,<span class="st">&quot;0113&quot;</span>,
<span class="st">&quot;0120&quot;</span>,<span class="st">&quot;0121&quot;</span>,<span class="st">&quot;0122&quot;</span>,<span class="st">&quot;0123&quot;</span>]</code></pre></div>
<p>One caveat is that <code>--package</code> won’t install packages outside of the snapshot on its own, so you have to add them to the <code>extra-deps</code> field of the global project’s <code>stack.yaml</code> beforehand, just like you would do for an actual project. If you need several non-Stackage packages, you may find it convenient to create a throwaway project for the sole purpose of letting <code>stack solver</code> figure out the necessary <code>extra-deps</code> for you.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">mkdir</span> throwaway
$ <span class="ex">stack</span> new throwaway --resolver lts-7.14 <span class="co"># Same resolver of the global project.</span>
<span class="co"># ...</span>
<span class="ex">Writing</span> configuration to file: throwaway/stack.yaml
<span class="ex">All</span> done.
$ <span class="bu">cd</span> throwaway
$ <span class="ex">vi</span> throwaway.cabal <span class="co"># Let's add reactive-banana to the dependencies.</span>
$ <span class="ex">stack</span> solver
<span class="co"># ...</span>
<span class="ex">Successfully</span> determined a build plan with 2 external dependencies.

<span class="ex">The</span> following changes will be made to stack.yaml:
<span class="ex">*</span> Dependencies to be added
    <span class="ex">extra-deps</span>:
    <span class="ex">-</span> pqueue-1.3.2
    <span class="ex">-</span> reactive-banana-1.1.0.1

<span class="ex">To</span> automatically update stack.yaml, rerun with <span class="st">'--update-config'</span>
$ <span class="ex">vi</span> ~/.stack/global-project/stack.yaml <span class="co"># Add the packages to the extra-deps.</span>
$ <span class="bu">cd</span> ..
$ <span class="fu">rm</span> -rf throwaway/
$ <span class="ex">stack</span> ghci --package reactive-banana
<span class="ex">pqueue-1.3.2</span>: configure
<span class="ex">pqueue-1.3.2</span>: build
<span class="ex">pqueue-1.3.2</span>: copy/register
<span class="ex">reactive-banana-1.1.0.1</span>: configure
<span class="ex">reactive-banana-1.1.0.1</span>: build
<span class="ex">reactive-banana-1.1.0.1</span>: copy/register
<span class="ex">Completed</span> 2 action(s)<span class="ex">.</span>
<span class="ex">Configuring</span> GHCi with the following packages: 
<span class="ex">GHCi</span>, version 8.0.1: http://www.haskell.org/ghc/  :? for help
<span class="ex">Loaded</span> GHCi configuration from /home/duplode/.ghci
<span class="ex">Loaded</span> GHCi configuration from /tmp/ghci23103/ghci-script
<span class="ex">GHCi</span><span class="op">&gt;</span> import Reactive.Banana
<span class="ex">GHCi</span><span class="op">&gt;</span> :t stepper
<span class="ex">stepper</span> :: MonadMoment m =<span class="op">&gt;</span> a -<span class="op">&gt;</span> Event a -<span class="op">&gt;</span> m (Behavior a)</code></pre></div>
<p>Support for running <code>stack solver</code> directly with the global project <a href="https://github.com/commercialhaskell/stack/issues/2656">is on the horizon</a>.</p>
<p>There are also interesting possibilities if you need to compile your throwaway code. That might be useful, for instance, if you ever feel like testing a hypothesis with a <a href="http://www.serpentine.com/criterion/tutorial.html">criterion</a> benchmark). While there is a <code>stack ghc</code> command, if you don’t need GHC profiles then taking advantage of <code>--ghci-options</code> to enable <code>-fobject-code</code> for <code>stack ghci</code> can be a more pleasant alternative.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">stack</span> ghci --ghci-options <span class="st">&quot;-O2 -fobject-code&quot;</span>
<span class="ex">Configuring</span> GHCi with the following packages: 
<span class="ex">GHCi</span>, version 8.0.1: http://www.haskell.org/ghc/  :? for help
<span class="ex">Loaded</span> GHCi configuration from /home/duplode/.ghci
<span class="ex">Loaded</span> GHCi configuration from /tmp/ghci23628/ghci-script
<span class="ex">GHCi</span><span class="op">&gt;</span> :l Foo.hs 
[<span class="ex">1</span> of 1] Compiling Foo              ( Foo.hs, /home/duplode/.stack/global-project/.stack-work/odir/Foo.o )
<span class="ex">Ok</span>, modules loaded: Foo (/home/duplode/.stack/global-project/.stack-work/odir/Foo.o)<span class="ex">.</span>
<span class="ex">GHCi</span><span class="op">&gt;</span> :main
<span class="ex">A</span> random number for you: 2045528912275320075</code></pre></div>
<p>A nice little thing about this approach is that the build artifacts are kept in the global project’s <code>.stack-work</code>, which means they won’t pollute whichever other directory you happen to be at. <code>-fobject-code</code> means you can’t write definitions directly on the GHCi prompt; however, that is not much of a nuisance, given that you are compiling the code anyway, and that the source file is just a <code>:!vim Foo.hs</code> away.</p>
<p>While in these notes I have focused on seat-of-the-pants experimentation, stack also provides tools for running Haskell code with minimal configuration in a more controlled manner. I specially recommend having a look at the <a href="https://docs.haskellstack.org/en/stable/GUIDE/#script-interpreter"><em>script interpreter</em> section of the stack User Guide</a>.</p>

<div id="comment-nav" class="pure-g-r">
  <div class="pure-u-1-5">
    
    
  </div>
  <div class="pure-u-1-5">
    <a id="gh-comments-button" class="pure-button" href="https://github.com/duplode/duplode.github.io/issues/9">Comment on GitHub</a>

    
      
        (see <a href="posts/casual-hacking-with-stack-reloaded.html#comment-nav">the full post</a> for a reddit link)
      
    
  </div>
  <div class="pure-u-3-5">
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Sun, 26 Feb 2017 10:00:00 UT</pubDate>
    <guid>http://duplode.github.io/posts/casual-hacking-with-stack-reloaded.html</guid>
    <dc:creator>Daniel Mlot</dc:creator>
</item>
<item>
    <title>Migrating a Project to stack</title>
    <link>http://duplode.github.io/posts/migrating-a-project-to-stack.html</link>
    <description><![CDATA[<p>This post consists of notes on how I converted one of my Haskell projects to stack. It provides a small illustration of how flexible stack can be in accomodating project organisation quirks on the way towards predictable builds.<!--more--> If you want to see the complete results, here are links to the <a href="https://bitbucket.org/duplode/stunts-cartography">Bitbucket repository</a> of Stunts Cartography, the example project I am using, and specifically to the <a href="https://bitbucket.org/duplode/stunts-cartography/src/3eb07c44f6e2eed19591f765b14fc5fbe2b8f946">source tree immediately after the migration</a>.</p>
<p>The first decision to make when migrating a project is which Stackage snapshot to pick. It had been a while since I last updated my project, and building it with the latest versions of all its dependencies would require a few adjustments. That being so, I chose to migrate to stack before any further patches. Since one of the main dependencies was <code>diagrams</code> 1.2, I went for <a href="https://www.stackage.org/lts-2.19"><code>lts-2.19</code></a>, the most recent LTS snapshot with that version of <code>diagrams</code> <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>.</p>
<pre><code>$ stack init --resolver lts-2.19</code></pre>
<p><code>stack init</code> creates a <code>stack.yaml</code> file based on an existing cabal file in the current directory. The <code>--resolver</code> option can be used to pick a specific snapshot.</p>
<p>One complicating factor in the conversion to stack was that two of the extra dependencies, <code>threepenny-gui-0.5.0.0</code> (one major version behind the current one) and <code>zip-conduit</code>, wouldn’t build with the LTS snapshot plus current Hackage without version bumps in their cabal files. Fortunately, stack deals very well with situations like this, in which minor changes to some dependency are needed. I simply forked the dependencies on GitHub, pushed the version bumps to my forks and referenced the commits in the <em>remote</em> GitHub repository in <code>stack.yaml</code>. A typical entry for a Git commit in the <code>packages</code> section looks like this:</p>
<div class="sourceCode"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="kw">-</span> <span class="fu">location:</span>
    <span class="fu">git:</span><span class="at"> https://github.com/duplode/zip-conduit</span>
    <span class="fu">commit:</span><span class="at"> 1eefc8bd91d5f38b760bce1fb8dd16d6e05a671d</span>
  <span class="fu">extra-dep:</span><span class="at"> true</span></code></pre></div>
<p>Keeping customised dependencies in public remote repositories is an excellent solution. It enables users to build the package without further intervention without requiring developers to clumsily bundle the source tree of the dependencies with the project, or waiting for a pull request to be accepted upstream and reach Hackage.</p>
<p>With the two tricky extra dependencies being offloaded to Git repositories, the next step was using <code>stack solver</code> to figure out the rest of them:</p>
<pre><code>$ stack solver --modify-stack-yaml
This command is not guaranteed to give you a perfect build plan
It's possible that even with the changes generated below, you will still
need to do some manual tweaking
Asking cabal to calculate a build plan, please wait
extra-deps:
- parsec-permutation-0.1.2.0
- websockets-snap-0.9.2.0
Updated /home/duplode/Development/stunts/diagrams/stack.yaml</code></pre>
<p>Here is the final <code>stack.yaml</code>:</p>
<div class="sourceCode"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">flags:</span>
  <span class="fu">stunts-cartography:</span>
    <span class="fu">repldump2carto:</span><span class="at"> true</span>
<span class="fu">packages:</span>
<span class="kw">-</span> <span class="st">'.'</span>
<span class="kw">-</span> <span class="fu">location:</span>
    <span class="fu">git:</span><span class="at"> https://github.com/duplode/zip-conduit</span>
    <span class="fu">commit:</span><span class="at"> 1eefc8bd91d5f38b760bce1fb8dd16d6e05a671d</span>
  <span class="fu">extra-dep:</span><span class="at"> true</span>
<span class="kw">-</span> <span class="fu">location:</span>
    <span class="fu">git:</span><span class="at"> https://github.com/duplode/threepenny-gui</span>
    <span class="fu">commit:</span><span class="at"> 2dd88e893f09e8e31378f542a9cd253cc009a2c5</span>
  <span class="fu">extra-dep:</span><span class="at"> true</span>
<span class="fu">extra-deps:</span>
<span class="kw">-</span> parsec-permutation-0.1.2.0
<span class="kw">-</span> websockets-snap-0.9.2.0
<span class="fu">resolver:</span><span class="at"> lts-2.19</span></code></pre></div>
<p><code>repldump2carto</code> is a flag defined in the cabal file. It is used to build a secondary executable. Beyond demonstrating how the <code>flags</code> section of <code>stack.yaml</code> works, I added it because <code>stack ghci</code> expects all possible build targets to have been built <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>.</p>
<p>As I have GHC 7.10.1 from my Linux distribution and the LTS 2.19 snapshot is made for GHC 7.8.4, I needed <code>stack setup</code> as an additional step. That command locally installs (in <code>~/.stack</code>) the GHC version required by the chosen snapshot.</p>
<p>That pretty much concludes the migration. All that is left is demonstrating: <code>stack build</code> to compile the project…</p>
<pre><code>$ stack build
JuicyPixels-3.2.5.2: configure
Boolean-0.2.3: download
# etc. (Note how deps from Git are handled seamlessly.)
threepenny-gui-0.5.0.0: configure
threepenny-gui-0.5.0.0: build
threepenny-gui-0.5.0.0: install
zip-conduit-0.2.2.2: configure
zip-conduit-0.2.2.2: build
zip-conduit-0.2.2.2: install
# etc.
stunts-cartography-0.4.0.3: configure
stunts-cartography-0.4.0.3: build
stunts-cartography-0.4.0.3: install
Completed all 64 actions.</code></pre>
<p>… <code>stack ghci</code> to play with it in GHCi…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> stack ghci
<span class="dt">Configuring</span> <span class="dt">GHCi</span> with the following packages<span class="fu">:</span> stunts<span class="fu">-</span>cartography
<span class="dt">GHCi</span>, version <span class="fl">7.8</span><span class="fu">.</span><span class="dv">4</span><span class="fu">:</span> http<span class="fu">://</span>www<span class="fu">.</span>haskell<span class="fu">.</span>org<span class="fu">/</span>ghc<span class="fu">/</span>  <span class="fu">:?</span> for help
<span class="dt">Loading</span> package ghc<span class="fu">-</span>prim <span class="fu">...</span> linking <span class="fu">...</span> done<span class="fu">.</span>
<span class="dt">Loading</span> package integer<span class="fu">-</span>gmp <span class="fu">...</span> linking <span class="fu">...</span> done<span class="fu">.</span>
<span class="dt">Loading</span> package base <span class="fu">...</span> linking <span class="fu">...</span> done<span class="fu">.</span>
<span class="co">-- etc.</span>
<span class="dt">Ok</span>, modules loaded<span class="fu">:</span> <span class="dt">GameState</span>, <span class="dt">Annotation</span>, <span class="dt">Types.Diagrams</span>, <span class="dt">Pics</span>,
<span class="dt">Pics.MM</span>, <span class="dt">Annotation.Flipbook</span>, <span class="dt">Annotation.LapTrace</span>,
<span class="dt">Annotation.LapTrace.Vec</span>, <span class="dt">Annotation.LapTrace.Parser.Simple</span>,
<span class="dt">Annotation.Parser</span>, <span class="dt">Types.CartoM</span>, <span class="dt">Parameters</span>, <span class="dt">Composition</span>, <span class="dt">Track</span>,
<span class="dt">Util.Misc</span>, <span class="dt">Pics.Palette</span>, <span class="dt">Output</span>, <span class="dt">Util.ByteString</span>, <span class="dt">Util.ZipConduit</span>,
<span class="dt">Replay</span>, <span class="dt">Paths</span>, <span class="dt">Util.Reactive.Threepenny</span>, <span class="dt">Util.Threepenny.Alertify</span>,
<span class="dt">Widgets.BoundedInput</span><span class="fu">.</span>
<span class="fu">*</span><span class="dt">GameState</span><span class="fu">&gt;</span> <span class="fu">:</span>l src<span class="fu">/</span>Viewer.hs <span class="co">-- The Main module.</span>
<span class="co">-- etc.</span>
<span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">:</span>main
<span class="dt">Welcome</span> to <span class="dt">Stunts</span> <span class="dt">Cartography</span><span class="fu">.</span>
<span class="dt">Open</span> your web browser and navigate to localhost<span class="fu">:</span><span class="dv">10000</span> to begin<span class="fu">.</span>

<span class="dt">Listening</span> on http<span class="fu">://</span><span class="fl">127.0</span><span class="fu">.</span><span class="fl">0.1</span><span class="fu">:</span><span class="dv">10000</span><span class="fu">/</span>
[<span class="dv">27</span><span class="fu">/</span><span class="dt">Jul</span><span class="fu">/</span><span class="dv">2015</span><span class="fu">:</span><span class="dv">00</span><span class="fu">:</span><span class="dv">55</span><span class="fu">:</span><span class="dv">11</span> <span class="fu">-</span><span class="dv">0300</span>] Server.httpServe<span class="fu">:</span> <span class="dt">START</span>, binding to
[http<span class="fu">://</span><span class="fl">127.0</span><span class="fu">.</span><span class="fl">0.1</span><span class="fu">:</span><span class="dv">10000</span><span class="fu">/</span>]</code></pre></div>
<p>… and looking at the build output in the depths of <code>.stack-work</code>:</p>
<pre><code>$ .stack-work/dist/x86_64-linux/Cabal-1.18.1.5/build/sc-trk-viewer/sc-trk-viewer
Welcome to Stunts Cartography 0.4.0.3.
Open your web browser and navigate to localhost:10000 to begin.

Listening on http://127.0.0.1:10000/
[26/Jul/2015:20:02:54 -0300] Server.httpServe: START, binding to
[http://127.0.0.1:10000/]</code></pre>
<p>With the upcoming stack 0.2 it will be possible to use <code>stack build --copy-bins --local-bin-path &lt;path&gt;</code> to copy any executables built as part of the project to a path. If the <code>--local-bin-path</code> option is omitted, the default is <code>~/.local/bin</code>. (In fact, you can already copy executables to <code>~/.local/bin</code> with stack 0.1.2 through <code>stack install</code>. However, I don’t want to overemphasise that command, as <code>stack install</code> not being equivalent to <code>cabal install</code> can cause some confusion.)</p>
<p>Hopefully this report will give you an idea of what to expect when migrating your projects to stack. Some details may appear a little strange, given how familiar cabal-install workflows are, and some features are still being shaped. All in all, however, stack works very well already: it definitely makes setting up reliable builds easier. The <a href="https://github.com/commercialhaskell/stack">stack repository at GitHub</a>, and specially <a href="https://github.com/commercialhaskell/stack/wiki">the wiki therein</a>, offers lots of helpful information, in case you need further details and usage tips.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>As a broader point, it just seems polite to, when possible, pick a LTS snapshot over than a nightly for a public project. It is more likely that those interested in building your project already have a specific LTS rather than an arbitrary nightly.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>That being so, a more natural arrangement would be treating <code>repldump2carto</code> as a full-blown subproject by giving it its own cabal file and adding it to the <code>packages</code> section. I would then be able to load only the main project in GHCi with <code>stack ghci stunts-cartography</code>.<a href="#fnref2">↩</a></p></li>
</ol>
</section>

<div id="comment-nav" class="pure-g-r">
  <div class="pure-u-1-5">
    
    
  </div>
  <div class="pure-u-1-5">
    <a id="gh-comments-button" class="pure-button" href="https://github.com/duplode/duplode.github.io/issues/7">Comment on GitHub</a>

    
      
        (see <a href="posts/migrating-a-project-to-stack.html#comment-nav">the full post</a> for a reddit link)
      
    
  </div>
  <div class="pure-u-3-5">
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 27 Jul 2015 06:00:00 UT</pubDate>
    <guid>http://duplode.github.io/posts/migrating-a-project-to-stack.html</guid>
    <dc:creator>Daniel Mlot</dc:creator>
</item>
<item>
    <title>Casual Hacking With stack</title>
    <link>http://duplode.github.io/posts/casual-hacking-with-stack.html</link>
    <description><![CDATA[<p><em>2017 update: This post was written shortly after the initial release of stack. While the workflow suggested here remains potentially useful, later versions of stack offer more immediate support for working outside the boundaries of a conventional Haskell project. For more on that, see <a href="../posts/casual-hacking-with-stack-reloaded.html">Casual Hacking With stack, Reloaded</a>.</em></p>
<p>Sandboxes are exceptionally helpful not just for working in long-term Haskell projects, but also for casual experiments. While playing around, we tend to install all sorts of packages in a carefree way, which increases a lot the risk of entering cabal hell. While vanilla cabal-install sandboxes prevent such a disaster, using them systematically for experiments mean that, unless you are meticulous, you will end up either with dozens of .hs files in a single sandbox or with dozens of copies of the libraries strewn across your home directory. And no one likes to be meticulous while playing around. In that context, stack, the recently released alternative to cabal-install, can prevent trouble with installing packages in a way more manageable than through ad-hoc sandboxes. In this post, I will suggest a few ways of using stack that may be convenient for experiments. I have been using stack for only a few days, therefore suggestions are most welcome!</p>
<div>

</div>
<!--more-->
<p>I won’t dwell on the motivation and philosophy behind stack <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>. Suffice it to say that, at least in the less exotic workflows, there is a centralised package database somewhere in <code>~/.stack</code> with packages pulled from a <a href="https://www.stackage.org/">Stackage</a> snapshot (and therefore known to be compatible with each other), which is supplemented by a per-project database (that is, just like cabal sandboxes) for packages not in Stackage (from Hackage or anywhere else). As that sounds like a great way to avoid headaches, we will stick to this arrangement, with only minor adjustments.</p>
<p>Once you have installed stack <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>, you can create a new environment for experiments with <code>stack new</code>:</p>
<pre><code>$ mkdir -p Development/haskell/playground
$ cd Development/haskell/playground
$ stack new --prefer-nightly</code></pre>
<p>The <code>--prefer-nightly</code> option makes stack use a nightly snapshot of Stackage, as opposed to a long term support one. As we are just playing around, it makes sense to pick as recent as possible packages from the nightly instead of the LTS. (Moreover, I use Arch Linux, which already has GHC 7.10 and <code>base</code> 4.8, while the current LTS snapshot assumes <code>base</code> 4.7.) If this is the first time you use stack, it will pick the latest nightly; otherwise it will default to whatever nightly you already have in <code>~/.stack</code>.</p>
<p><code>stack new</code> creates a neat default project structure for you <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>:</p>
<pre><code>$ ls -R
.:
app  LICENSE  new-template.cabal  Setup.hs  src  stack.yaml  test

./app:
Main.hs

./src:
Lib.hs

./test:
Spec.hs</code></pre>
<p>Of particular interest is the <code>stack.yaml</code> file, which holds the settings for the local stack environment. We will talk more about it soon.</p>
<div class="sourceCode"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">flags:</span><span class="at"> </span><span class="kw">{}</span>
<span class="fu">packages:</span>
<span class="kw">-</span> <span class="st">'.'</span>
<span class="fu">extra-deps:</span><span class="at"> </span><span class="kw">[]</span>
<span class="fu">resolver:</span><span class="at"> nightly-2015-07-19</span></code></pre></div>
<p>As for the default <code>new-template.cabal</code> file, you can use its <code>build-depends</code> section to keep track of what you are installing. That will make <code>stack build</code> (the command which builds the current project without installing it) to download and install any dependencies you add to the cabal file automatically. Besides that, having the installed packages noted down may prove useful in case you need to reproduce your configuration elsewhere <a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>. If your experiments become a real project, you can clean up the <code>build-depends</code> without losing track of the packages you installed for testing purposes by moving their entries to a second cabal file, kept in a subdirectory:</p>
<pre><code>$ mkdir xp
$ cp new-template.cabal xp/xp.cabal
$ cp LICENSE xp # Too lazy to delete the lines from the cabal file.
$ cd xp
$ vi Dummy.hs # module Dummy where &lt;END OF FILE&gt;
$ vi xp.cabal # Adjust accordingly, and list your extra deps.</code></pre>
<p>You also need to tell stack about this fake subproject. All it takes is adding an entry for the subdirectory in <code>stack.yaml</code>:</p>
<div class="sourceCode"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">packages:</span>
<span class="kw">-</span> <span class="st">'.'</span> <span class="co"># The default entry.</span>
<span class="kw">-</span> <span class="st">'xp'</span></code></pre></div>
<p>With the initial setup done, we use <code>stack build</code> to compile the projects:</p>
<pre><code>$ stack build
new-template-0.1.0.0: configure
new-template-0.1.0.0: build
fmlist-0.9: download
fmlist-0.9: configure
fmlist-0.9: build
new-template-0.1.0.0: install
fmlist-0.9: install
xp-0.1.0.0: configure
xp-0.1.0.0: build
xp-0.1.0.0: install
Completed all 3 actions.</code></pre>
<p>In this test run, I added <code>fmlist</code> as a dependency of the fake package <code>xp</code>, and so it was automatically installed by stack. The output of <code>stack build</code> goes to a <code>.stack-work</code> subdirectory.</p>
<p>With the packages built, we can use GHCi in the stack environment with <code>stack ghci</code>. It loads the library source files of the current project by default:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> stack ghci
<span class="dt">Configuring</span> <span class="dt">GHCi</span> with the following packages<span class="fu">:</span> new<span class="fu">-</span>template, xp
<span class="dt">GHCi</span>, version <span class="fl">7.10</span><span class="fu">.</span><span class="dv">1</span><span class="fu">:</span> http<span class="fu">://</span>www<span class="fu">.</span>haskell<span class="fu">.</span>org<span class="fu">/</span>ghc<span class="fu">/</span>  <span class="fu">:?</span> for help
[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">2</span>] <span class="dt">Compiling</span> <span class="dt">Lib</span>              (
<span class="fu">/</span>home<span class="fu">/</span>duplode<span class="fu">/</span><span class="dt">Development</span><span class="fu">/</span>haskell<span class="fu">/</span>playground<span class="fu">/</span>src<span class="fu">/</span>Lib.hs, interpreted )
[<span class="dv">2</span> <span class="kw">of</span> <span class="dv">2</span>] <span class="dt">Compiling</span> <span class="dt">Dummy</span>            (
<span class="fu">/</span>home<span class="fu">/</span>duplode<span class="fu">/</span><span class="dt">Development</span><span class="fu">/</span>haskell<span class="fu">/</span>playground<span class="fu">/</span>xp<span class="fu">/</span>Dummy.hs, interpreted )
<span class="dt">Ok</span>, modules loaded<span class="fu">:</span> <span class="dt">Dummy</span>, <span class="dt">Lib</span><span class="fu">.</span>
<span class="fu">*</span><span class="dt">Lib</span><span class="fu">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.FMList</span> <span class="kw">as</span> <span class="dt">F</span> <span class="co">-- Which we have just installed.</span>
<span class="fu">*</span><span class="dt">Lib</span> <span class="dt">F</span><span class="fu">&gt;</span> <span class="co">-- We can also load executables specified in the cabal file.</span>
<span class="fu">*</span><span class="dt">Lib</span> <span class="dt">F</span><span class="fu">&gt;</span> <span class="fu">:</span>l <span class="dt">Main</span>
[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">2</span>] <span class="dt">Compiling</span> <span class="dt">Lib</span>              (
<span class="fu">/</span>home<span class="fu">/</span>duplode<span class="fu">/</span><span class="dt">Development</span><span class="fu">/</span>haskell<span class="fu">/</span>playground<span class="fu">/</span>src<span class="fu">/</span>Lib.hs, interpreted )
[<span class="dv">2</span> <span class="kw">of</span> <span class="dv">2</span>] <span class="dt">Compiling</span> <span class="dt">Main</span>             (
<span class="fu">/</span>home<span class="fu">/</span>duplode<span class="fu">/</span><span class="dt">Development</span><span class="fu">/</span>haskell<span class="fu">/</span>playground<span class="fu">/</span>app<span class="fu">/</span>Main.hs, interpreted )
<span class="dt">Ok</span>, modules loaded<span class="fu">:</span> <span class="dt">Lib</span>, <span class="dt">Main</span><span class="fu">.</span>
<span class="fu">*</span><span class="dt">Main</span> <span class="dt">F</span><span class="fu">&gt;</span></code></pre></div>
<p>Dependencies not in Stackage have to be specified in <code>stack.yaml</code> as well as in the cabal files, so that stack can manage them too. Alternative sources of packages include source trees in subdirectories of the project, Hackage and remote Git repositories <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>:</p>
<div class="sourceCode"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">flags:</span><span class="at"> </span><span class="kw">{}</span>
<span class="fu">packages:</span>
<span class="kw">-</span> <span class="st">'.'</span>
<span class="kw">-</span> <span class="st">'xp'</span>
<span class="kw">-</span> <span class="fu">location:</span><span class="at"> deps/acme-missiles-0.3 </span><span class="co"># Sources in a subdirectory.</span>
  <span class="fu">extra-dep:</span><span class="at"> true </span><span class="co"># Mark as dep, i.e. not part of the project proper.</span>
<span class="fu">extra-deps:</span>
<span class="kw">-</span> acme-safe-0.1.0.0 <span class="co"># From Hackage.</span>
<span class="kw">-</span> acme-dont-1.1 <span class="co"># Also from Hackage, dependency of acme-safe.</span>
<span class="fu">resolver:</span><span class="at"> nightly-2015-07-19</span></code></pre></div>
<p><code>stack build</code> will then install the extra dependencies to <code>.stack-work/install</code>. You can use <code>stack solver</code> to chase the indirect dependencies introduced by them. For instance, this is its output after commenting the <code>acme-dont</code> line in the <code>stack.yaml</code> just above:</p>
<pre><code>$ stack solver --no-modify-stack-yaml
This command is not guaranteed to give you a perfect build plan
It's possible that even with the changes generated below, you will still
need to do some manual tweaking
Asking cabal to calculate a build plan, please wait
extra-deps:
- acme-dont-1.1</code></pre>
<p>To conclude this tour, once you get bored of the initial Stackage snapshot all it takes to switch it is changing the <code>resolver</code> field in <code>stack.yaml</code> (with nightlies, that amounts to changing the date at the end of the snapshot name). That will cause all dependencies to be downloaded and built from the chosen snapshot when <code>stack build</code> is next ran. As of now, the previous snapshot will remain in <code>~/.stack</code> unless you go there and delete it manually; however, a command for removing unused snapshots <a href="https://github.com/commercialhaskell/stack/issues/133">is in the plans</a>.</p>
<p>I have not tested the sketch of a workflow presented here extensively, yet what I have seen was enough to convince me stack can provide a pleasant experience for casual experiments as well as full-fledged projects. Happy hacking!</p>
<p><strong>Update:</strong> There is now a follow-up post about the other side of the coin, <a href="../posts/migrating-a-project-to-stack.html">Migrating a Project to stack</a>.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>For that, see <a href="https://www.fpcomplete.com/blog/2015/06/why-is-stack-not-cabal">Why is stack not cabal?</a>, written by a member of its development team.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>For installation guidance, see the <a href="https://github.com/commercialhaskell/stack/wiki/Downloads">GitHub project wiki</a>. Installing stack is easy, and there are many ways to do it (I simply got it from Hackage with <code>cabal install stack</code>).<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>To create an environment for an existing project, with its own structure and cabal file, you would use <code>stack init</code> instead.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>In any case, you can also use <code>stack exec -- ghc-pkg list</code> to see all packages installed from the snapshot you are currently using. That, however, will be far messier than the <code>build-depends</code> list, as it will include indirect dependencies as well.<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>For the latter, see <a href="https://github.com/commercialhaskell/stack/wiki/Nonstandard-project-initialization">the project wiki</a>.<a href="#fnref5">↩</a></p></li>
</ol>
</section>

<div id="comment-nav" class="pure-g-r">
  <div class="pure-u-1-5">
    
    
  </div>
  <div class="pure-u-1-5">
    <a id="gh-comments-button" class="pure-button" href="https://github.com/duplode/duplode.github.io/issues/6">Comment on GitHub</a>

    
      
        (see <a href="posts/casual-hacking-with-stack.html#comment-nav">the full post</a> for a reddit link)
      
    
  </div>
  <div class="pure-u-3-5">
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Thu, 23 Jul 2015 02:30:00 UT</pubDate>
    <guid>http://duplode.github.io/posts/casual-hacking-with-stack.html</guid>
    <dc:creator>Daniel Mlot</dc:creator>
</item>
<item>
    <title>Applicative Archery</title>
    <link>http://duplode.github.io/posts/applicative-archery.html</link>
    <description><![CDATA[<p>It is widely agreed that the laws of the <code>Applicative</code> class are not pretty to look at.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">pure id <span class="fu">&lt;*&gt;</span> v <span class="fu">=</span> v                            <span class="co">-- identity</span>
pure f <span class="fu">&lt;*&gt;</span> pure x <span class="fu">=</span> pure (f x)               <span class="co">-- homomorphism</span>
u <span class="fu">&lt;*&gt;</span> pure y <span class="fu">=</span> pure (<span class="fu">$</span> y) <span class="fu">&lt;*&gt;</span> u              <span class="co">-- interchange</span>
pure (<span class="fu">.</span>) <span class="fu">&lt;*&gt;</span> u <span class="fu">&lt;*&gt;</span> v <span class="fu">&lt;*&gt;</span> w <span class="fu">=</span> u <span class="fu">&lt;*&gt;</span> (v <span class="fu">&lt;*&gt;</span> w) <span class="co">-- composition</span></code></pre></div>
<p>Monad laws, in comparison, not only look less odd to begin with but can also be stated in a much more elegant way in terms of Kleisli composition <code>(&lt;=&lt;)</code>. Shouldn’t there be an analogous nice presentation for <code>Applicative</code> as well? That became a static question in my mind while I was studying applicative functors many moons ago. After finding surprisingly little commentary on this issue, I decided to try figuring it out by myself. <!--more--> <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>Let’s cast our eye over <code>Applicative</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Functor</span> t <span class="ot">=&gt;</span> <span class="dt">Applicative</span> t <span class="kw">where</span>
<span class="ot">    pure  ::</span> a <span class="ot">-&gt;</span> t a
<span class="ot">    (&lt;*&gt;) ::</span> t (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> t b</code></pre></div>
<p>If our inspiration for reformulating <code>Applicative</code> is Kleisli composition, the only sensible plan is to look for a category in which the <code>t (a -&gt; b)</code> functions-in-a-context from the type of <code>(&lt;*&gt;)</code> are the arrows, just like <code>a -&gt; t b</code> functions are arrows in a Kleisli category. Here is one way to state that plan in Haskell terms:</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">class</span> <span class="dt">Applicative</span> t <span class="ot">=&gt;</span> <span class="dt">Starry</span> t <span class="kw">where</span>
<span class="ot">&gt;     idA  ::</span> t (a <span class="ot">-&gt;</span> a)
<span class="ot">&gt;     (.*) ::</span> t (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> t (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> t (a <span class="ot">-&gt;</span> c)
<span class="ot">&gt;</span> 
<span class="ot">&gt;</span>     <span class="kw">infixl</span> <span class="dv">4</span> <span class="fu">.*</span>
<span class="ot">&gt;</span> <span class="co">-- The Applicative constraint is wishful thinking:</span>
<span class="ot">&gt;</span> <span class="co">-- When you wish upon a star...</span></code></pre></div>
<p>The laws of <code>Starry</code> are the category laws for the <code>t (a -&gt; b)</code> arrows:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">idA <span class="fu">.*</span> v <span class="fu">=</span> v                <span class="co">-- left identity</span>
u <span class="fu">.*</span> idA <span class="fu">=</span> u                <span class="co">-- right identity</span>
u <span class="fu">.*</span> v <span class="fu">.*</span> w <span class="fu">=</span> u <span class="fu">.*</span> (v <span class="fu">.*</span> w) <span class="co">-- associativity</span></code></pre></div>
<p>The question, then, is whether it is possible to reconstruct <code>Applicative</code> and its laws from <code>Starry</code>. The answer is a resounding yes! The proof is in <a href="../extras/applicative-archery-manuscript.pdf">this manuscript</a>, which I have not transcribed here as it is a little too long for a leisurely post like this one <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>. The argument is set in motion by establishing that <code>pure</code> is an arrow mapping of a functor from <strong>Hask</strong> to a <code>Starry</code> category, and that both <code>(&lt;*&gt;)</code> and <code>(.*)</code> are arrow mappings of functors in the opposite direction. That leads to several naturality properties of those functors, from which the <code>Applicative</code> laws can be obtained. Along the way, we also get definitions for the <code>Starry</code> methods in terms of the <code>Applicative</code> ones…</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     idA <span class="fu">=</span> pure id
<span class="ot">&gt;</span>     u <span class="fu">.*</span> v <span class="fu">=</span> fmap (<span class="fu">.</span>) u <span class="fu">&lt;*&gt;</span> v</code></pre></div>
<p>… and vice-versa:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">pure x <span class="fu">=</span> fmap (const x) idA
u <span class="fu">&lt;*&gt;</span> v <span class="fu">=</span> fmap (<span class="fu">$</span> ()) (u <span class="fu">.*</span> fmap const v)</code></pre></div>
<p>Also interesting is how the property relating <code>fmap</code> and <code>(&lt;*&gt;)</code>…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap f u <span class="fu">=</span> pure f <span class="fu">&lt;*&gt;</span> u</code></pre></div>
<p>… now tells us that a <code>Functor</code> results from composing the <code>pure</code> functor with the <code>(&lt;*&gt;)</code> functor. That becomes more transparent if we write it point-free:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap <span class="fu">=</span> (<span class="fu">&lt;*&gt;</span>) <span class="fu">.</span> pure</code></pre></div>
<p>In order to ensure <code>Starry</code> is equivalent to <code>Applicative</code> we still need to prove the converse, that is, obtain the <code>Starry</code> laws from the <code>Applicative</code> laws plus the definitions of <code>idA</code> and <code>(.*)</code> just above. That is not difficult; all it takes is substituting the definitions in the <code>Starry</code> laws and:</p>
<ul>
<li><p>For left identity, noticing that <code>(id .) = id</code>.</p></li>
<li><p>For right identity, applying the interchange law and noticing that <code>($ id) . (.)</code> is <code>id</code> in a better disguise.</p></li>
<li><p>For associativity, using the laws to move all <code>(.)</code> to the left of the <code>(&lt;*&gt;)</code> and then verifying that the resulting messes of dots in both sides are equivalent.</p></li>
</ul>
<p>As a tiny example, here is the <code>Starry</code> instance of <code>Maybe</code>…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Starry</span> <span class="dt">Maybe</span> <span class="kw">where</span>
    idA              <span class="fu">=</span> <span class="dt">Just</span> id
    <span class="dt">Just</span> g <span class="fu">.*</span> <span class="dt">Just</span> f <span class="fu">=</span> <span class="dt">Just</span> (g <span class="fu">.</span> f)
    _      <span class="fu">.*</span> _      <span class="fu">=</span> <span class="dt">Nothing</span></code></pre></div>
<p>… and the verification of the laws for it:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Left identity:</span>
idA <span class="fu">.*</span> u <span class="fu">=</span> u
<span class="dt">Just</span> id <span class="fu">.*</span> u <span class="fu">=</span> u
<span class="co">-- u = Nothing</span>
<span class="dt">Just</span> id <span class="fu">.*</span> <span class="dt">Nothing</span> <span class="fu">=</span> <span class="dt">Nothing</span>
<span class="dt">Nothing</span> <span class="fu">=</span> <span class="dt">Nothing</span>
<span class="co">-- u = Just f</span>
<span class="dt">Just</span> id <span class="fu">.*</span> <span class="dt">Just</span> f <span class="fu">=</span> <span class="dt">Just</span> f
<span class="dt">Just</span> (id <span class="fu">.</span> f) <span class="fu">=</span> <span class="dt">Just</span> f
<span class="dt">Just</span> f <span class="fu">=</span> <span class="dt">Just</span> f

<span class="co">-- Right identity:</span>
u <span class="fu">.*</span> idA <span class="fu">=</span> u
u <span class="fu">.*</span> <span class="dt">Just</span> id <span class="fu">=</span> u
<span class="co">-- u = Nothing</span>
<span class="dt">Nothing</span> <span class="fu">.*</span> <span class="dt">Just</span> id <span class="fu">=</span> <span class="dt">Nothing</span>
<span class="dt">Nothing</span> <span class="fu">=</span> <span class="dt">Nothing</span>
<span class="co">-- u = Just g</span>
<span class="dt">Just</span> g <span class="fu">.*</span> <span class="dt">Just</span> id <span class="fu">=</span> <span class="dt">Just</span> g
<span class="dt">Just</span> (g <span class="fu">.*</span> id) <span class="fu">=</span> <span class="dt">Just</span> g
<span class="dt">Just</span> g <span class="fu">=</span> <span class="dt">Just</span> g

<span class="co">-- Associativity:</span>
u <span class="fu">.*</span> v <span class="fu">.*</span> w <span class="fu">=</span> u <span class="fu">.*</span> (v <span class="fu">.*</span> w)
<span class="co">-- If any of u, v and w are Nothing, both sides will be Nothing.</span>
<span class="dt">Just</span> h <span class="fu">.*</span> <span class="dt">Just</span> g <span class="fu">.*</span> <span class="dt">Just</span> f <span class="fu">=</span> <span class="dt">Just</span> h <span class="fu">.*</span> (<span class="dt">Just</span> g <span class="fu">.*</span> <span class="dt">Just</span> f)
<span class="dt">Just</span> (h <span class="fu">.</span> g) <span class="fu">.*</span> <span class="dt">Just</span> f <span class="fu">=</span> <span class="dt">Just</span> h <span class="fu">.*</span> (<span class="dt">Just</span> (g <span class="fu">.</span> f))
<span class="dt">Just</span> (h <span class="fu">.</span> g <span class="fu">.</span> f) <span class="fu">=</span> <span class="dt">Just</span> (h <span class="fu">.</span> (g <span class="fu">.</span> f))
<span class="dt">Just</span> (h <span class="fu">.</span> g <span class="fu">.</span> f) <span class="fu">=</span> <span class="dt">Just</span> (h <span class="fu">.</span> g <span class="fu">.</span> f)</code></pre></div>
<p>It works just as intended:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="dt">Just</span> (<span class="dv">2</span><span class="fu">*</span>) <span class="fu">.*</span> <span class="dt">Just</span> (subtract <span class="dv">3</span>) <span class="fu">.*</span> <span class="dt">Just</span> (<span class="fu">*</span><span class="dv">4</span>) <span class="fu">&lt;*&gt;</span> <span class="dt">Just</span> <span class="dv">5</span>
<span class="dt">Just</span> <span class="dv">34</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="dt">Just</span> (<span class="dv">2</span><span class="fu">*</span>) <span class="fu">.*</span> <span class="dt">Nothing</span> <span class="fu">.*</span> <span class="dt">Just</span> (<span class="fu">*</span><span class="dv">4</span>) <span class="fu">&lt;*&gt;</span> <span class="dt">Just</span> <span class="dv">5</span>
<span class="dt">Nothing</span></code></pre></div>
<p>I do not think there will be many opportunities to use the <code>Starry</code> methods in practice. We are comfortable enough with applicative style, through which we see most <code>t (a -&gt; b)</code> arrows as intermediates generated on demand, rather than truly meaningful values. Furthermore, the <code>Starry</code> laws are not really easier to prove (though they are certainly easier to remember!). Still, it was an interesting exercise to do, and it eases my mind to know that there is a neat presentation of the <code>Applicative</code> laws that I can relate to.</p>
<p>This post is Literate Haskell, in case you wish to play with <code>Starry</code> in GHCi (here is <a href="https://raw.githubusercontent.com/duplode/duplode.github.io/sources/src/posts/applicative-archery.lhs">the raw .lhs file</a> ).</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">instance</span> <span class="dt">Starry</span> <span class="dt">Maybe</span> <span class="kw">where</span>
<span class="ot">&gt;</span> <span class="kw">instance</span> <span class="dt">Starry</span> [] <span class="kw">where</span>
<span class="ot">&gt;</span> <span class="kw">instance</span> <span class="dt">Starry</span> ((<span class="ot">-&gt;</span>) a) <span class="kw">where</span>
<span class="ot">&gt;</span> <span class="kw">instance</span> <span class="dt">Starry</span> <span class="dt">IO</span> <span class="kw">where</span></code></pre></div>
<p>As for proper implementations in libraries, the closest I found was <a href="https://hackage.haskell.org/package/semigroupoids-5.0.0.2/docs/Data-Semigroupoid-Static.html"><code>Data.Semigroupoid.Static</code></a>, which lives in Edward Kmett’s <a href="https://hackage.haskell.org/package/semigroupoids-5.0.0.2"><code>semigroupoids</code></a> package. <em>“Static arrows”</em> is the actual technical term for the <code>t (a -&gt; b)</code> arrows. The module provides…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Static</span> f a b <span class="fu">=</span> <span class="dt">Static</span> {<span class="ot"> runStatic ::</span> f (a <span class="ot">-&gt;</span> b) }</code></pre></div>
<p>… which uses the definitions shown here for <code>idA</code> and <code>(.*)</code> as <code>id</code> and <code>(.)</code> of its <code>Category</code> instance.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>There is a reasonably well-known alternative formulation of <code>Applicative</code>: the <code>Monoidal</code> class as featured in <a href="http://blog.ezyang.com/2012/08/applicative-functors">this post by Edward Z. Yang</a>. While the laws in this formulation are much easier to grasp, <code>Monoidal</code> feels a little alien from the perspective of a Haskeller, as it shifts the focus from function shuffling to tuple shuffling.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Please excuse some oddities in the manuscript, such as off-kilter terminology and weird conventions (e.g. consistently naming arguments in applicative style as <code>w &lt;*&gt; v &lt;*&gt; u</code> rather than <code>u &lt;*&gt; v &lt;*&gt; w</code> in applicative style). The most baffling choice was using <code>id</code> rather than <code>()</code> as the throwaway argument to <code>const</code>. I guess I did that because <code>($ ())</code> looks bad in handwriting.<a href="#fnref2">↩</a></p></li>
</ol>
</section>

<div id="comment-nav" class="pure-g-r">
  <div class="pure-u-1-5">
    
    
  </div>
  <div class="pure-u-1-5">
    <a id="gh-comments-button" class="pure-button" href="https://github.com/duplode/duplode.github.io/issues/5">Comment on GitHub</a>

    
      
        (see <a href="posts/applicative-archery.html#comment-nav">the full post</a> for a reddit link)
      
    
  </div>
  <div class="pure-u-3-5">
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 06 Jul 2015 20:00:00 UT</pubDate>
    <guid>http://duplode.github.io/posts/applicative-archery.html</guid>
    <dc:creator>Daniel Mlot</dc:creator>
</item>
<item>
    <title>What Does fmap Preserve?</title>
    <link>http://duplode.github.io/posts/what-does-fmap-preserve.html</link>
    <description><![CDATA[<p>A common way of introducing <code>fmap</code> is saying that it only changes the values in a container, and not its structure. Leaving behind the the functors-as-containers metaphor, we can convey the same idea by saying that <code>fmap</code> leaves the context of the values in a <code>Functor</code> unchanged. But what, exactly, is the “context” or “structure” being preserved? “It depends on the functor”, though correct, is not an entirely satisfactory answer. The functor laws, after all, are highly abstract, and make no mention of anything a programmer would be inclined to call “structure” (say, the skeleton of a list); and yet the preservation we alluded to follows from them. After struggling a bit with this question, I realised that the incompatibility is only apparent. This post shows how the tension can be resolved through the mediation of <em>parametricity</em> and <em>naturality</em>, two concepts from different domains that are intertwined in Haskell.</p>
<div>

</div>
<!--more-->
<h2 id="categorical-cautionary-comment">Categorical Cautionary Comment</h2>
<p>A correct, if rather cruel, answer to “Why does <code>fmap</code> preserve structure?” would be “By definition, you silly!” To see what would be meant by that, let’s have a look at the functor laws.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap id <span class="fu">=</span> id                   <span class="co">-- 1st functor law</span>
fmap (g <span class="fu">.</span> f) <span class="fu">=</span> fmap g <span class="fu">.</span> fmap f <span class="co">-- 2nd functor law</span></code></pre></div>
<p><code>fmap</code> is a mapping of functions that takes identity to identity, and composed functions to the corresponding composed functions. Identity and composition make up the structure, in the mathematical sense, of a category. In category theory, a functor is a mapping between categories that preserves category structure. Therefore, the functor laws ensure that Haskell <code>Functor</code>s are indeed functors; more precisely, functors from <strong>Hask</strong> to <strong>Hask</strong>, <strong>Hask</strong> being the category with Haskell types as objects and Haskell functions as arrows.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>That functors preserve category structure is evident. However, our question is not directly about “structure” in the mathematical sense, but with the looser acception it has in programmer parlance. In what follows, our goal will be clarifying this casual meaning.</p>
<h2 id="what-can-you-do-with-a-function">What Can You Do With a Function?</h2>
<p>As an intial, fuzzy characterisation, we can say that, given a functorial value, the <code>Functor</code> context is everything in it other than the wrapped values. Starting from that, a straightforward way of showing why <code>fmap</code> preserves context involves <em>parametric polymorphism</em>; more specifically, the preservation is ensured by the wild generality of the types in the signature of <code>fmap</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap<span class="ot"> ::</span> (<span class="dt">Functor</span> t) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (t a <span class="ot">-&gt;</span> t b)</code></pre></div>
<p>We will look at <code>fmap</code> as a function of one argument which converts a plain <code>a -&gt; b</code> function into a function which operates on functorial values. The key fact is that there is very little we can do with the <code>a -&gt; b</code> function when defining <code>fmap</code>. Composition is not an option, as choosing a function other than <code>id</code> to compose it with would require knowledge about the <code>a</code> and <code>b</code> types. The only thing that can be done is applying the function to any <code>a</code> values we can retrieve from the <code>t a</code> functorial value. Since the context of a <code>t a</code> value, whatever it is, does not include the <code>a</code> values, it follows that changes to the context cannot depend on the <code>a -&gt; b</code> function. Given that <code>fmap</code> takes no other arguments, any changes in the context must happen for any <code>a -&gt; b</code> arguments uniformly. The first functor law, however, says that <code>fmap id = id</code>, and so there is one argument, <code>id</code>, which leads to no changes in the context. Therefore, <code>fmap</code> never changes the context.</p>
<p>The informal argument above can be made precise through a proper type theory treatment of parametricity. Philip Wadler’s <em><a href="http://homepages.inf.ed.ac.uk/wadler/topics/parametricity.html#free">Theorems for free!</a></em> is a well-known example of such work. However, a type theory approach, while entirely appropriate, would have us taking concrete Haksell types for granted and only incidentally concluding they are functors; in contrast, our problem begins with functors. For that reason, we will follow a different path and look at the issue from a primarily categorical point of view.</p>
<h2 id="what-is-a-context-after-all">What Is a Context, After All?</h2>
<p>In the spirit of category theory, we will now focus not on the types but on the functions between them. After all, given functional purity any interesting properties of a Haskell value can be verified with suitable functions. Let’s start with a few concrete examples of how the context of a <code>Functor</code> can be probed with functions.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">length<span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Int</span></code></pre></div>
<p>The length of a list is perhaps the most obvious example of a structural property. It depends only on the list skeleton, and not at all on the values in it. The type of <code>length</code>, with a fully polymorphic element type which is not mentioned by the result type, reflects such an independence. An obvious consequence is that <code>fmap</code>, which only affects the list elements, cannot change the length of a list. We can state that like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">length xs <span class="fu">=</span> length (fmap f xs)</code></pre></div>
<p>Or, in a more categorical fashion:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">length <span class="fu">=</span> length <span class="fu">.</span> fmap f</code></pre></div>
<p>Our second example of a structure-probing function will be <code>reverse</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">reverse<span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> [a]</code></pre></div>
<p>While the result value of <code>reverse</code> obviously depends on the list elements, <code>reverse</code> cannot actually modify the elements, given that the function is fully polymorphic on the element type. <code>fmap</code> applied to a list after reversing it will thus affect the same element values there were before the reversal; they will only have been rearranged. In other words, <code>fmap</code> <em>commutes</em> with <code>reverse</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap f <span class="fu">.</span> reverse <span class="fu">=</span> reverse <span class="fu">.</span> fmap f</code></pre></div>
<p>Our final example will be <code>listToMaybe</code> from <code>Data.Maybe</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">listToMaybe ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</code></pre></div>
<p>Operationally, <code>listToMaybe</code> is a safe version of <code>head</code>, which returns <code>Nothing</code> when given an empty list. Again, the function is fully polymorphic in the element type, and so the value of the first element cannot be affected by it. The scenario is very similar to what we have seen for <code>reverse</code>, and an analogous property holds, with the only difference being that <code>fmap</code> is instantiated at a different <code>Functor</code> at each side of the equation:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Maybe-fmap on the left, []-fmap on the right.</span>
fmap f <span class="fu">.</span> listToMaybe <span class="fu">=</span> listToMaybe <span class="fu">.</span> fmap f</code></pre></div>
<p>Earlier we said that the <code>Functor</code> context consists of everything but the wrapped values. Our examples illustrate how parametric polymorphism makes it possible to keep that general idea while putting functions rather than values under the spotlight. The context is all that can be probed with functions fully polymorphic on the type parameter of the <code>Functor</code>; or, taking the abstraction further, the context <em>is</em> the collection of functions fully polymorphic on the type parameter of the <code>Functor</code>. We now have done away with the fuzziness of our preliminary, valure-centric definition. The next step is clarifying how that definition relates to <code>fmap</code>.</p>
<h2 id="your-freedom-comes-naturally">Your Freedom Comes Naturally</h2>
<p>By identifying the <code>Functor</code> context with polymorphic functions, we can also state the context-preserving trait of <code>fmap</code> through commutativity equations like those shown in the above examples. For an arbitrary context-probing function <code>r</code>, the equation is:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- f is arbitrary, and so are the involved functors.</span>
fmap f <span class="fu">.</span> r <span class="fu">=</span> r <span class="fu">.</span> fmap f</code></pre></div>
<p>The equations for <code>reverse</code> and <code>listToMaybe</code> clearly have that shape. <code>length</code> does not seem to fit at first sight, but that can be easily solved by lifting it to a constant functor such as the one provided by <code>Control.Applicative</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">lengthC ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Const</span> <span class="dt">Int</span> a
lengthC <span class="fu">=</span> <span class="dt">Const</span> <span class="fu">.</span> length
<span class="co">-- length = getConst . lengthC</span>

<span class="co">-- For constant functors, fmap f = id regardless of f.</span>
fmap f <span class="fu">.</span> lengthC <span class="fu">=</span> lengthC <span class="fu">.</span> fmap f</code></pre></div>
<p>A similar trick can be done with the <code>Identity</code> functor to make functions in which the type parameter of the <code>Functor</code> appears bare, such as <code>Just :: a -&gt; Maybe a</code>, fit our scheme.</p>
<p>It turns out that there is a category theory concept that captures the commutativity property we are interested in. A <em>natural transformation</em> is a translation between functors which preserves arrows being mapped through them. For Haskell <code>Functor</code>s, that amounts to preserving functions being mapped via <code>fmap</code>. We can display the relation through a diagram:</p>
<figure>
<img src="../images/posts/what-does-fmap-preserve/naturality-diagram.png" alt="Naturality for Haskell Functors. Example instantation: T = []; U = Maybe; r = listToMaybe." /><figcaption><em>Naturality for Haskell <code>Functor</code>s. Example instantation: <code>T = []; U = Maybe; r = listToMaybe</code>.</em></figcaption>
</figure>
<p>The naturality condition matches our commuativity property. Indeed, <em>polymorphic functions are natural transformations between Haskell <code>Functors</code></em>. The proof of this appealing result is not trivial, and requires some theoretical work, just like in the case of the closely related results about parametricity we alluded to earlier. In any case, all it takes to go from “natural transformations preserve <code>fmap</code>” to “<code>fmap</code> preserves natural transformations” is tilting our heads while looking at the diagram above!</p>
<p>Given how we identified <code>Functor</code> contexts, polymorphic functions and natural transformations, we can finally give a precise answer to our question. The context consists of natural transformations between functors, and therefore <code>fmap</code> preserves it.</p>
<h2 id="structures-and-structures">Structures and Structures</h2>
<p>Earlier on, we have said that we would not be directly concerned with structure in the sense mathematicians use the word, but only with the fuzzy Haskell concept that sometimes goes by the same name. To wrap things up, we will now illustrate the fact that both acceptions are not worlds apart. Let’s have another look at the second functor law, which states that <code>fmap</code> preserves composition:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap (g <span class="fu">.</span> f) <span class="fu">=</span> fmap g <span class="fu">.</span> fmap f</code></pre></div>
<p>Structure, in the mathematical sense, refers to some collection of interesting operations and distinguished elements. In this example, the relevant operation is function composition, which is part of the structure of the <strong>Hask</strong> category. Besides that, however, we are now able to note the uncanny resemblance between the shapes of the law, which says that it does not matter whether we compose <code>f</code> and <code>g</code> before applying <code>fmap</code>, and of the commutativity properties we used to characterise functorial contexts. The upshot is that by identifying context and structure of a <code>Functor</code> with polymorphic functions, we retain much of the spirit of the mathematical usage of structure. The interesting operations, in our case, are the polymorphic functions with which the context is probed. Perhaps it even makes sense to keep talking of structure of a <code>Functor</code> even after dropping the container metaphor.</p>
<h2 id="fmap-preserves-fmap">fmap Preserves fmap</h2>
<p>Speaking of the second law, we will, just for kicks, use it to show how to turn things around and look at <code>fmap</code> as a natural transformation between <code>Functor</code>s. In order to do so, we have to recall that <code>(.)</code> is <code>fmap</code> for the function functor:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- First, we rewrite the second law in a more suggestive form:</span>
fmap (g <span class="fu">.</span> f) <span class="fu">=</span> fmap g <span class="fu">.</span> fmap f
fmap (((<span class="fu">.</span>) g) f) <span class="fu">=</span> (<span class="fu">.</span>) (fmap g) (fmap f)
fmap <span class="fu">.</span> (<span class="fu">.</span>) g <span class="fu">=</span> ((<span class="fu">.</span>) <span class="fu">.</span> fmap) g <span class="fu">.</span> fmap

<span class="co">-- Next, some synonyms to indicate the Functors fmap leads to.</span>

<span class="co">-- fmap from identity to t</span>
<span class="ot">fmap_t ::</span> (<span class="dt">Functor</span> t) <span class="ot">=&gt;</span> (<span class="ot">-&gt;</span>) a b <span class="ot">-&gt;</span> (<span class="ot">-&gt;</span>) (t a) (t b)
fmap_t <span class="fu">=</span> fmap

<span class="co">-- fmap from identity to ((-&gt;) a)</span>
<span class="ot">fmap_fun ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> ((<span class="ot">-&gt;</span>) a b <span class="ot">-&gt;</span> (<span class="ot">-&gt;</span>) a c)
fmap_fun <span class="fu">=</span> (<span class="fu">.</span>)

<span class="co">-- fmap from identity to the composite functor ((-&gt;) (t a)) . t</span>
<span class="ot">fmap_fun_t ::</span> (<span class="dt">Functor</span> t)
           <span class="ot">=&gt;</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> ((<span class="ot">-&gt;</span>) (t a) (t b) <span class="ot">-&gt;</span> (<span class="ot">-&gt;</span>) (t a) (t c))
fmap_fun_t <span class="fu">=</span> fmap_fun <span class="fu">.</span> fmap_t

<span class="co">-- The second law then becomes:</span>
fmap_t <span class="fu">.</span> fmap_fun g <span class="fu">=</span> fmap_fun_t g <span class="fu">.</span> fmap_t

<span class="co">-- That, however, shows fmap_t is a natural transformation:</span>
fmap <span class="fu">.</span> fmap g <span class="fu">=</span> fmap g <span class="fu">.</span> fmap</code></pre></div>
<p>By fixing <code>t</code> and <code>a</code> in the signature of <code>fmap_t</code> above, we get one functor on either side of the outer function arrow: <code>((-&gt;) a)</code> on the left and <code>((-&gt;) (t a)) . t</code> on the right. <code>fmap</code> is a natural transformation between these two functors.</p>
<h2 id="further-reading">Further Reading</h2>
<ul>
<li><p>In <em><a href="http://existentialtype.wordpress.com/2011/03/27/the-holy-trinity/">The Holy Trinity</a></em>, Robert Harper comments on the deep connection between logic, type theory and category theory that allows us to shift seamlessly between the categorical and the type theoretical perspectives, as we have done here.</p></li>
<li><p><em><a href="http://blog.sigfpe.com/2008/05/you-could-have-defined-natural.html">You Could Have Defined Natural Transformations</a></em> by Dan Piponi is a very clear introduction to natural transformations in a Haskell context.</p></li>
<li><p>We have already mentioned Philip Wadler’s <em><a href="http://homepages.inf.ed.ac.uk/wadler/topics/parametricity.html#free">Theorems for free!</a></em>, which is a reasonably accessible introduction to the <em>free theorems</em>. <em>Free theorems</em> are results about functions that, thanks to parametric polymorphism, can be deduced from the type of the function alone. Given suitable generalisations, free theorems and naturality conditions provide two parallel ways of reaching the same results about Haskell functions.</p></li>
<li><p><em><a href="http://www.janis-voigtlaender.eu/Voi09b.html">Free Theorems Involving Type Constructor Classes</a></em>, a functional pearl by Janis Voigtländer that illustrates how free theorem generation can be generalised to types parametric on type constructors and type classes.</p></li>
<li><p>For an explicitly categorical perspective on parametricity, a good place to start if you are willing to dig into theory is the section on parametricity in <em><a href="http://www.site.uottawa.ca/~phil/papers/">Some Aspects of Categories in Computer Science</a></em> by Philip J. Scott.</p></li>
</ul>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>A category theory primer would be too big a detour for this post. If the category theory concepts I just mentioned are new to you, I suggest the following gentle introductions for Haskellers, which have very different approaches: <a href="https://en.wikibooks.org/wiki/Haskell/Category_theory">Haskell Wikibook chapter on category theory</a>, and Gabriel Gonzalez’s posts <a href="http://www.haskellforall.com/2012/08/the-category-design-pattern.html">The category design pattern</a> and <a href="http://www.haskellforall.com/2012/09/the-functor-design-pattern.html">The functor design pattern</a>.<a href="#fnref1">↩</a></p></li>
</ol>
</section>

<div id="comment-nav" class="pure-g-r">
  <div class="pure-u-1-5">
    
    
  </div>
  <div class="pure-u-1-5">
    <a id="gh-comments-button" class="pure-button" href="https://github.com/duplode/duplode.github.io/issues/2">Comment on GitHub</a>

    
      
        (see <a href="posts/what-does-fmap-preserve.html#comment-nav">the full post</a> for a reddit link)
      
    
  </div>
  <div class="pure-u-3-5">
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Mon, 02 Jun 2014 06:00:00 UT</pubDate>
    <guid>http://duplode.github.io/posts/what-does-fmap-preserve.html</guid>
    <dc:creator>Daniel Mlot</dc:creator>
</item>
<item>
    <title>Lenses You Can Make at Home</title>
    <link>http://duplode.github.io/posts/lenses-you-can-make-at-home.html</link>
    <description><![CDATA[<p>The most striking traits of the <code>lens</code> library are its astonishing breadth and generality. And yet, the whole edifice is built around van Laarhoven lenses, which are a simple and elegant concept. In this hands-on exposition, I will show how the <code>Lens</code> type can be understood without prerequisites other than a passing acquaintance with Haskell functors. Encouraging sound intuition in an accessible manner can go a long way towards making <code>lens</code> and lenses less intimidating.</p>
<div>

</div>
<!--more-->
<h2 id="humble-beginnings">Humble Beginnings</h2>
<p>Dramatis personæ:</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Functor.Identity</span> (<span class="dt">Identity</span>(..))
<span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> (<span class="dt">Const</span>(..))</code></pre></div>
<p>I will define a toy data type so that we have something concrete to play with, as well as a starting point for working out generalisations.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Foo</span> {<span class="ot"> bar ::</span> <span class="dt">Int</span> } <span class="kw">deriving</span> (<span class="dt">Show</span>)</code></pre></div>
<p>The record definition gets us a function for accessing the <code>bar</code> field.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="fu">:</span>t bar
<span class="ot">bar ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></code></pre></div>
<p>As for the setter, we have to define it ourselves, unless we feel like mucking around with record update syntax.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; setBar ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Foo</span>
<span class="ot">&gt;</span> setBar x y <span class="fu">=</span> x { bar <span class="fu">=</span> y }</code></pre></div>
<p>Armed with a proper getter and setter pair, we can easily flip the sign of the <code>bar</code> inside a <code>Foo</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="kw">let</span> x <span class="fu">=</span> <span class="dt">Foo</span> <span class="dv">3</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> setBar x (negate <span class="fu">$</span> bar x)
<span class="dt">Foo</span> {bar <span class="fu">=</span> <span class="fu">-</span><span class="dv">3</span>}</code></pre></div>
<p>We can make it even easier by defining a modifier function for <code>bar</code>.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modifyBar ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Foo</span>
<span class="ot">&gt;</span> modifyBar k x <span class="fu">=</span> setBar x <span class="fu">.</span> k <span class="fu">.</span> bar <span class="fu">$</span> x</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> modifyBar negate x
<span class="dt">Foo</span> {bar <span class="fu">=</span> <span class="fu">-</span><span class="dv">3</span>}</code></pre></div>
<p><code>setBar</code> can be recovered from <code>modifyBar</code> by using <code>const</code> to discard the original value and put the new one in its place.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">const y <span class="fu">=</span> \_ <span class="ot">-&gt;</span> y</code></pre></div>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; setBar' ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Foo</span>
<span class="ot">&gt;</span> setBar' x y <span class="fu">=</span> modifyBar (const y) x</code></pre></div>
<p>If our data type had several fields, defining a modifier for each of them would amount to quite a lot of boilerplate. We could minimise it by, starting from our <code>modifyBar</code> definition, abstracting from the specific getter and setter for <code>bar</code>. Here, things begin to pick up steam. I will define a general <code>modify</code> function, which, given an appropriate getter-setter pair, can deal with any field of any data type.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modify ::</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> s
<span class="ot">&gt;</span> modify getter setter k x <span class="fu">=</span> setter x <span class="fu">.</span> k <span class="fu">.</span> getter <span class="fu">$</span> x</code></pre></div>
<p>It is trivial to recover <code>modifyBar</code>; when we do so, <code>s</code> becomes <code>Foo</code> and <code>a</code> becomes <code>Int</code>.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modifyBar' ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Foo</span>
<span class="ot">&gt;</span> modifyBar' <span class="fu">=</span> modify bar setBar</code></pre></div>
<h2 id="functors-galore">Functors Galore</h2>
<p>The next step of generalisation is the one leap of faith I will ask of you in the way towards lenses. I will introduce a variant of <code>modify</code> in which the modifying function, rather than being a plain <code>a -&gt; a</code> function, returns a functorial value. Defining it only takes an extra <code>fmap</code>.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modifyF ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s)
<span class="ot">&gt;</span>                      <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> f a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f s
<span class="ot">&gt;</span> modifyF getter setter k x <span class="fu">=</span> fmap (setter x) <span class="fu">.</span> k <span class="fu">.</span> getter <span class="fu">$</span> x</code></pre></div>
<p>And here is its specialisation for <code>bar</code>.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modifyBarF ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> f <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> f <span class="dt">Foo</span>
<span class="ot">&gt;</span> modifyBarF <span class="fu">=</span> modifyF bar setBar</code></pre></div>
<p>Why on Earth we would want to do that? For one, it allows for some nifty tricks depending on the functor we choose. Let’s try it with lists. Specialising the <code>modifyF</code> type would give:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">modifyL ::</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> [a]) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> [s]</code></pre></div>
<p>Providing the getter and the setter would result in a <code>(a -&gt; [a]) -&gt; s -&gt; [s]</code> function. Can you guess what it would do?</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> modifyBarF (\y <span class="ot">-&gt;</span> [<span class="dv">0</span><span class="fu">..</span>y]) x
[<span class="dt">Foo</span> {bar <span class="fu">=</span> <span class="dv">0</span>},<span class="dt">Foo</span> {bar <span class="fu">=</span> <span class="dv">1</span>},<span class="dt">Foo</span> {bar <span class="fu">=</span> <span class="dv">2</span>},<span class="dt">Foo</span> {bar <span class="fu">=</span> <span class="dv">3</span>}]</code></pre></div>
<p>As the types suggest, we get a function which modifies the field in multiple ways and collects the results.</p>
<p>I claimed that moving from <code>modify</code> to <code>modifyF</code> was a generalisation. Indeed, we can recover <code>modify</code> by bringing <code>Identity</code>, the dummy functor, into play.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Identity</span> a <span class="fu">=</span> <span class="dt">Identity</span> {<span class="ot"> runIdentity ::</span> a }

<span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Identity</span> <span class="kw">where</span>
    fmap f (<span class="dt">Identity</span> x) <span class="fu">=</span> <span class="dt">Identity</span> (f x)</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">modifyI ::</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Identity</span> a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Identity</span> s</code></pre></div>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modify' ::</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> s
<span class="ot">&gt;</span> modify' getter setter k <span class="fu">=</span>
<span class="ot">&gt;</span>     runIdentity <span class="fu">.</span> modifyF getter setter (<span class="dt">Identity</span> <span class="fu">.</span> k)</code></pre></div>
<p>We wrap the field value with <code>Identity</code> value after applying <code>k</code> and unwrap the final result after applying the setter. Since <code>Identity</code> does nothing interesting to the wrapped values, the overall result boils down to our original <code>modify</code>. If you have found this definition confusing, I suggest that you, as an exercise, rewrite it in pointful style and substitute the definition of <code>modifyF</code>.</p>
<p>We managed to get <code>modify</code> back with little trouble, which is rather interesting. However, what is truly surprising is that we can reconstruct not only the modifier but also the getter! To pull that off, we will use <code>Const</code>, which is a very quaint functor.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Const</span> a b <span class="fu">=</span> <span class="dt">Const</span> {<span class="ot"> getConst ::</span> a }

<span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Const</span> a) <span class="kw">where</span>
    fmap _ (<span class="dt">Const</span> y) <span class="fu">=</span> <span class="dt">Const</span> y</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">modifyC ::</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Const</span> r a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Const</span> r s</code></pre></div>
<p>If functors were really containers, <code>Const</code> would be an Acme product. A <code>Const a b</code> value does not contain anything of type <code>b</code>; what it does contain is an <code>a</code> value that we cannot even modify, given that <code>fmap f</code> is <code>id</code> regardless of what <code>f</code> is. As a consequence, if, given a field of type <code>a</code>, we pick <code>Const a</code> as the functor to use with <code>modifyF</code> and use the modifying function to wrap the field value with <code>Const</code>, then the value will not be affected by the setter, and we will be able to recover it later. That suffices for recovering the getter.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; get ::</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> a
<span class="ot">&gt;</span> get getter setter <span class="fu">=</span> getConst <span class="fu">.</span> modifyF getter setter <span class="dt">Const</span>
<span class="ot">&gt;</span> 
<span class="ot">&gt; getBar ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
<span class="ot">&gt;</span> getBar <span class="fu">=</span> get bar setBar</code></pre></div>
<h2 id="the-grand-unification">The Grand Unification</h2>
<p>Given a getter and a setter, <code>modifyF</code> gets us a corresponding functorial modifier. From it, by choosing the appropriate functors, we can recover the getter and a plain modifier; the latter, in turn, allows us to recover the setter. We can highlight the correspondence by redefining once more the recovered getters and modifiers, this time in terms of the functorial modifier.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">modifyF ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s)
                     <span class="ot">-&gt;</span> ((a <span class="ot">-&gt;</span> f a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f s)</code></pre></div>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modify'' ::</span> ((a <span class="ot">-&gt;</span> <span class="dt">Identity</span> a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Identity</span> s) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> s
<span class="ot">&gt;</span> modify'' modifier k <span class="fu">=</span> runIdentity <span class="fu">.</span> modifier (<span class="dt">Identity</span> <span class="fu">.</span> k)
<span class="ot">&gt;</span> 
<span class="ot">&gt; modifyBar'' ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Foo</span>
<span class="ot">&gt;</span> modifyBar'' <span class="fu">=</span> modify'' modifyBarF
<span class="ot">&gt;</span> 
<span class="ot">&gt; set ::</span> ((a <span class="ot">-&gt;</span> <span class="dt">Identity</span> a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Identity</span> s) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s
<span class="ot">&gt;</span> set modifier x y <span class="fu">=</span> modify'' modifier (const y) x
<span class="ot">&gt;</span> 
<span class="ot">&gt; setBar'' ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Foo</span>
<span class="ot">&gt;</span> setBar'' <span class="fu">=</span> set modifyBarF
<span class="ot">&gt;</span> 
<span class="ot">&gt; get' ::</span> ((a <span class="ot">-&gt;</span> <span class="dt">Const</span> a a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Const</span> a s) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a)
<span class="ot">&gt;</span> get' modifier <span class="fu">=</span> getConst <span class="fu">.</span> modifier <span class="dt">Const</span>
<span class="ot">&gt;</span> 
<span class="ot">&gt; getBar' ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
<span class="ot">&gt;</span> getBar' <span class="fu">=</span> get' modifyBarF</code></pre></div>
<p>The bottom line is that given <code>modifyBarF</code> we can get by without <code>modifyBar</code>, <code>setBar</code> and <code>bar</code>, as <code>modify''</code>, <code>set</code> and <code>get'</code> allow us to reconstruct them whenever necessary. While our first version of <code>get</code> was, in effect, just a specialised <code>const</code> with a wacky implementation, <code>get'</code> is genuinely useful because it cuts the number of separate field manipulation functions we have to deal with by a third.</p>
<h2 id="expanding-horizons">Expanding Horizons</h2>
<p>Even after all of the work so far we can still generalise further! Let’s have a second look at <code>modifyF</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">modifyF ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> s)
                     <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> f a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f s
modifyF getter setter k x <span class="fu">=</span> fmap (setter x) <span class="fu">.</span> k <span class="fu">.</span> getter <span class="fu">$</span> x</code></pre></div>
<p>The type of <code>setter</code> is <code>(s -&gt; a -&gt; s)</code>; however, nothing in the implementation forces the first argument and the result to have the same type. Furthermore, with a different signature <code>k</code> could have a more general type, <code>(a -&gt; f b)</code>, as long as the type of <code>setter</code> was adjusted accordingly. We can thus give <code>modifyF</code> a more general type.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modifyGenF ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (s <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (s <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t)
<span class="ot">&gt;</span>                         <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t
<span class="ot">&gt;</span> modifyGenF getter setter k x <span class="fu">=</span> fmap (setter x) <span class="fu">.</span> k <span class="fu">.</span> getter <span class="fu">$</span> x</code></pre></div>
<p>For the sake of completeness, here are the generalised recovery functions. <code>get</code> is not included because the generalisation does not affect it.</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; modifyGen ::</span> ((a <span class="ot">-&gt;</span> <span class="dt">Identity</span> b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Identity</span> t) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> t
<span class="ot">&gt;</span> modifyGen modifier k <span class="fu">=</span> runIdentity <span class="fu">.</span> modifier (<span class="dt">Identity</span> <span class="fu">.</span> k)
<span class="ot">&gt;</span> 
<span class="ot">&gt; setGen ::</span> ((a <span class="ot">-&gt;</span> <span class="dt">Identity</span> b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Identity</span> t) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t
<span class="ot">&gt;</span> setGen modifier x y <span class="fu">=</span> modifyGen modifier (const y) x</code></pre></div>
<p>By now, it is clear that our getters and setters need not be ways to manipulate fields in a record. In a broader sense, a getter is anything that produces a value from another; in other words, any function can be a getter. By the same token, any binary function can be a setter, as all that is required is that it combines one value with another producing a third; the initial and final values do not even need to have the same type.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> That is a long way from the toy data type we started with!</p>
<h2 id="the-reveal">The Reveal</h2>
<p>If we look at <code>modifyGenF</code> as a function of two arguments, its result type becomes:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t</code></pre></div>
<p>Now, let’s take a peek at <a href="http://hackage.haskell.org/package/lens-4.1.2/docs/Control-Lens-Lens.html#t:Lens">Control.Lens.Lens</a>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Lens</span> s t a b <span class="fu">=</span> forall f<span class="fu">.</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t</code></pre></div>
<p>It is the same type! We have reached our destination.<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> A lens is what we might have called a generalised functorial modifier; furthermore, sans implementation details we have that:</p>
<ul>
<li>The <code>lens</code> function is <code>modifyGenF</code>;</li>
<li><code>modifyF</code> is <code>lens</code> specialised to produce simple lenses;<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a></li>
<li><code>modifyBarF</code> is a lens with type <code>Lens Foo Foo Int Int</code>;</li>
<li><code>(^.)</code> is flipped <code>get'</code>;</li>
<li><code>set</code> is <code>setGen</code>;</li>
<li><code>over</code> is <code>modifyGen</code> further generalised.<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a></li>
</ul>
<p><code>lens</code> uses type synonyms liberally, so those correspondences are not immediately obvious form the signatures in the documentation. Digging a little deeper, however, shows that in</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">set ::</span> <span class="dt">ASetter</span> s t a b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> t</code></pre></div>
<p><code>ASetter</code> is merely</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">ASetter</span> s t a b <span class="fu">=</span> (a <span class="ot">-&gt;</span> <span class="dt">Identity</span> b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Identity</span> t</code></pre></div>
<p>Analogously, we have</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(^.) ::</span> s <span class="ot">-&gt;</span> <span class="dt">Getting</span> a s a <span class="ot">-&gt;</span> a

<span class="kw">type</span> <span class="dt">Getting</span> r s a <span class="fu">=</span> (a <span class="ot">-&gt;</span> <span class="dt">Const</span> r a) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">Const</span> r s</code></pre></div>
<p>Behind the plethora of type synonyms - <code>ASetter</code>, <code>Getting</code>, <code>Fold</code>, <code>Traversal</code>, <code>Prism</code>, <code>Iso</code> and so forth - there are different choices of functors,<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a> which make it possible to capture many different concepts as variations on lenses. The variations may be more general or less general than lenses; occasionally they are neither, as the overlap is just partial. The fact that we can express so much through parametrization of functors is key to the extraordinary breadth of <code>lens</code>.</p>
<h2 id="going-forward">Going Forward</h2>
<p>This exposition is primarily concerned with building lenses, and so very little was said about how to use them. In any case, we have seen enough to understand why lenses are also known as functional references. By unifying getters and setters, lenses provide a completely general vocabulary to point at parts of a whole.</p>
<p>Finally, a few words about composition of lenses are unavoidable. One of the great things about lenses is that they are just functions; even better, they are functions with signatures tidy enough for them to compose cleanly with <code>(.)</code>. That makes it possible to compose lenses independently of whether you intend to get, set or modify their targets. Here is a quick demonstration using the tuple lenses from <code>lens</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="fu">:</span>m
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="fu">:</span>m <span class="fu">+</span><span class="dt">Control.Lens</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> ((<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">3</span>,<span class="dv">4</span>)) <span class="fu">^.</span> _1 <span class="fu">.</span> _2
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="dv">2</span>
<span class="dt">GHCi</span><span class="fu">&gt;</span> set (_1 <span class="fu">.</span> _2) <span class="dv">0</span> ((<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">3</span>,<span class="dv">4</span>))
<span class="dt">GHCi</span><span class="fu">&gt;</span> ((<span class="dv">1</span>,<span class="dv">0</span>),(<span class="dv">3</span>,<span class="dv">4</span>))</code></pre></div>
<p>A perennial topic in discussions about <code>lens</code> is the order of composition of lenses. They are often said to compose backwards; that is, backwards with respect to composition of record accessors and similar getters. For instance, the getter corresponding to the <code>_1 . _2</code> lens is <code>snd . fst</code>. The claim that lenses compose backwards, or in the “wrong order”, however, are only defensible when talking about style, and not about semantics. That becomes clear after placing the signatures of a getter and its corresponding lens side by side.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="fu">:</span>t fst
fst<span class="ot"> ::</span> (a, b) <span class="ot">-&gt;</span> a
<span class="dt">GHCi</span><span class="fu">&gt;</span> <span class="fu">:</span>t<span class="ot"> _1 ::</span> <span class="dt">Lens'</span> (a, b) a
<span class="ot">_1 ::</span> <span class="dt">Lens'</span> (a, b) a
<span class="ot"> ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f a) <span class="ot">-&gt;</span> (a, b) <span class="ot">-&gt;</span> f (a, b)</code></pre></div>
<p>The getter takes a value of the source type and produces a value of the target type. The lens, however, takes a function from the target type and produces a function from the source type. Therefore, it is no surprise that the order of composition differs, and the order for lenses is entirely natural. That ties in closely to what we have seen while implementing lenses. While we can squeeze lenses until they give back getters, it is much easier to think of them as generalised modifiers.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>We are not quite as free when it comes to pairing getters and setters. Beyond the obvious need for getter and setter to start from values of the same type, they should behave sanely when composed. In particular, the following should hold:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">get' modifier (setGen modifier y x) ≡ y

setGen modifier (get' modifier x) x ≡ x

setGen modifier z (setGen modifier y x) ≡ setGen modifier z x</code></pre></div>
<a href="#fnref1">↩</a></li>
<li id="fn2"><p>“What about the <code>forall</code>?” you might ask. Are we cheating? Not quite. The <code>forall</code> is there to control how <code>f</code> is specialised when lens combinators are used. The underlying issue does not affect our reasoning here. If you are into type system subtleties, there were a few interesting comments about it in the <a href="http://www.reddit.com/r/haskell/comments/241aec/lenses_you_can_make_at_home/ch2rbgp">reddit thread</a> for this post.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><code>Lens' s a</code> or <code>Lens s s a a</code>, as opposed to <code>Lens s t a b</code>.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Yes, even further; from taking modifying functions to taking modifying <a href="https://www.fpcomplete.com/user/liyang/profunctors">profunctors</a>. The difference need not worry us now.<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>And in some cases of profunctors to replace the function type constructor.<a href="#fnref5">↩</a></p></li>
</ol>
</section>

<div id="comment-nav" class="pure-g-r">
  <div class="pure-u-1-5">
    
    
  </div>
  <div class="pure-u-1-5">
    <a id="gh-comments-button" class="pure-button" href="https://github.com/duplode/duplode.github.io/issues/1">Comment on GitHub</a>

    
      
        (see <a href="posts/lenses-you-can-make-at-home.html#comment-nav">the full post</a> for a reddit link)
      
    
  </div>
  <div class="pure-u-3-5">
  </div>
</div>

<div><div class="license">
  <p>
    <span class="inline-centered">
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-sa/4.0/80x15.png" /></a>
    </span>
    <span class="inline-centered">
      Post licensed under a
      <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
    </span>
  </p>
</div>

</div>
]]></description>
    <pubDate>Sat, 26 Apr 2014 12:00:00 UT</pubDate>
    <guid>http://duplode.github.io/posts/lenses-you-can-make-at-home.html</guid>
    <dc:creator>Daniel Mlot</dc:creator>
</item>

    </channel>
</rss>
